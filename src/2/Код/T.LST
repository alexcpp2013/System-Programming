Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 1
t.asm



      1					       IDEAL
      2					       P386
      3	    0000			       MODEL MEDIUM
      4
      5					       ; Џ?¤Є«озЁвЁ д ©« ¬­Ґ¬®­?з­Ёе Ї®§­ зҐ­м Є®«м®а?ў
      6					       INCLUDE "lst2.inc"
1     7					 ;		       ‹€‘’€Ќѓ 2.2
1     8					 ;	Џа®жҐ¤гал ўў®¤ /ўлў®¤  ®ЎйҐЈ® ­ §­ зҐ­Ёп
1     9					 ;	 ¤«п а Ў®вл ў жўҐв­®¬ вҐЄбв®ў®¬	аҐ¦Ё¬Ґ
1    10					 ;
1    11					 ; Ђўв®а вҐЄбв 	Їа®Ја ¬¬л Љг« Є®ў ‚« ¤Ё¬Ёа ѓҐ­­ ¤мҐўЁз.
1    12					 ; ” ©«	lst_2_02.inc, 10.03.2000.
1    13
1    14	    0000			 DATASEG
1    15					 ; Колір і фон тексту, що виводиться (за замовчуванням встановимо
1    16					 ; вивід білого	тексту по чорному фону)
1    17	    0000  0F			 TextColorAndBackground	DB 0Fh
1    18					 ; Початкова позиція для виводу	текстової строки на екран
1    19	    0001  ????			 ScreenString DW ?
1    20	    0003  ????			 ScreenColumn DW ?
1    21	    0005			 ENDS
1    22
1    23	    0000			 CODESEG
1    24					 ;*******************************************************
1    25					 ;*    Вивід байта на екран в шістнадцятирічному коді	*
1    26					 ;* Підпрограма	виводить вміст регістру	AL		*
1    27					 ;* в шіснадцятирічному	коді в задану позицію екрана.	*
1    28					 ;* Координати позиції передаються через глобальні	*
1    29					 ;* змінні ScreenString	і ScreenColumn.	Після		*
1    30					 ;* виконання операції виводу відбувається автомати-	*
1    31					 ;* чне	збільшення значень цих змінних.			*
1    32					 ;*******************************************************
1    33	    0000			 PROC ShowByteHexCode near
1    34	    0000  60				 pusha
1    35	    0001  1E				 push	 DS
1    36	    0002  06				 push	 ES
1    37						 ; Настроїти DS	на глобальний сегмент даних
1    38	    0003  BF 0000s			 mov	 DI,DGROUP
1    39	    0006  8E DF				 mov	 DS,DI
1    40						 ; Настроїти строкові команди процесора	на 
1    41						 ; автоінкрементний режим (рух "вперед")
1    42	    0008  FC				 cld
1    43
1    44					 ; Настроїти пару ES:DS	для прямого виводу у відеопам'ять
1    45	    0009  50				 push	 AX
1    46						 ; Завантажити адресу сегмента відеоданих в ES
1    47	    000A  B8 B800			 mov	 AX,0B800h
1    48	    000D  8E C0				 mov	 ES,AX
1    49						 ; Помножити номер рядка на довжину рядка в байтах
1    50	    000F  A1 0001r			 mov	 AX,[ScreenString]
1    51	    0012  BA 00A0			 mov	 DX,160
1    52	    0015  F7 E2				 mul	 DX
1    53						 ; Додати до отриманого	добутку	номер
1    54						 ; колонки (двічі)
1    55	    0017  03 06	0003r			 add	 AX,[ScreenColumn]
1    56	    001B  03 06	0003r			 add	 AX,[ScreenColumn]
1    57						 ; Переписати результат	в індексний регістр
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 2
t.asm



1    58	    001F  8B F8				 mov	 DI,AX
1    59	    0021  58				 pop	 AX
1    60
1    61					 ; Використовувати колір символів, заданий за замовчуванням
1    62	    0022  8A 26	0000r			 mov	 AH,[TextColorAndBackground]
1    63					 ; Вивести старший розряд числа
1    64	    0026  50				 push	 AX
1    65						 ; Виділити старший розряд
1    66	    0027  C0 E8	04			 shr	 AL,4
1    67						 ; Перетворити старший розряд в	код ASCII
1    68	    002A  04 30				 add	 AL,'0'
1    69	    002C  3C 39				 cmp	 AL,'9'
1    70	    002E  76 02				 jbe	 @@M0
1    71	    0030  04 07				 add	 AL,'A'-'9'- 1
1    72						 ; Вивести розряд числа	на екран
1    73	    0032  AB			 @@M0:	 stosw
1    74	    0033  58				 pop	 AX
1    75					 ; Вивести молодший розряд числа
1    76						 ; Виділити молодший розряд числа
1    77	    0034  24 0F				 and	 AL,0FH
1    78						 ; Перетворити молодший	розряд в код ASCII
1    79	    0036  04 30				 add	 AL,'0'
1    80	    0038  3C 39				 cmp	 AL,'9'
1    81	    003A  76 02				 jbe	 @@M1
1    82	    003C  04 07				 add	 AL,'A'-'9'- 1
1    83						 ; Вивести розряд числа	на екран
1    84	    003E  AB			 @@M1:	 stosw
1    85
1    86					 ; Підготовка для виводу наступних байтів
1    87						 ; Перевести поточну позицію на	2 символи ліворуч
1    88	    003F  83 06	0003r 02		 add	 [ScreenColumn],2
1    89						 ; Перевірити перетин правої границі екрана 
1    90	    0044  83 3E	0003r 50		 cmp	 [ScreenColumn],80
1    91	    0049  72 09				 jb	 @@End
1    92						 ; Якщо	досягнута права	границя	екрана -
1    93						 ; перейти на наступну строку
1    94	    004B  83 2E	0003r 50		 sub	 [ScreenColumn],80
1    95	    0050  FF 06	0001r			 inc	 [ScreenString]
1    96	    0054  07			 @@End:	 pop	 ES
1    97	    0055  1F				 pop	 DS
1    98	    0056  61				 popa
1    99	    0057  C3				 ret
1   100	    0058			 ENDP ShowByteHexCode
1   101
1   102
1   103					 ;*****************************************************
1   104					 ;*	    Вивід 16-розрядного	слова на екран	      *
1   105					 ;*		 в шістнадцятирічному коді	      *
1   106					 ;* Параметри:					      *
1   107					 ;* AX - число,	яке буде виведено на екран.	      *
1   108					 ;* Номер рядка	передається через глобальну	      *
1   109					 ;* змінну ScreenString, номер стовпчика - через      *
1   110					 ;* змінну ScreenColumn, колір тексту визначається    *
1   111					 ;* глобальною змінною TextColorAndBackground.	      *
1   112					 ;*****************************************************
1   113	    0058			 PROC ShowHexWord NEAR
1   114	    0058  86 C4				 xchg	 AL,AH
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 3
t.asm



1   115	    005A  E8 FFA3			 call	 ShowByteHexCode
1   116	    005D  86 C4				 xchg	 AL,AH
1   117	    005F  E8 FF9E			 call	 ShowByteHexCode
1   118	    0062  C3				 ret
1   119	    0063			 ENDP ShowHexWord
1   120
1   121
1   122					 ;*****************************************************
1   123					 ;*	    Вивід 32-розрядного	слова на екран	      *
1   124					 ;*		 в шіснадцятирічному коді	      *
1   125					 ;* Параметри:					      *
1   126					 ;* EAX	- число, яке буде виведено на екран.	      *
1   127					 ;* Номер рядка	передається через глобальну	      *
1   128					 ;* змінну ScreenString, номер стовпчика - через      *
1   129					 ;* змінну ScreenColumn, колір тексту визначається    *
1   130					 ;* глобальною змінною TextColorAndBackground.	      *
1   131					 ;*****************************************************
1   132	    0063			 PROC ShowHexDWord NEAR
1   133	    0063  66| C1 C0 08			 rol	 EAX,8
1   134	    0067  E8 FF96			 call	 ShowByteHexCode
1   135	    006A  66| C1 C0 08			 rol	 EAX,8
1   136	    006E  E8 FF8F			 call	 ShowByteHexCode
1   137	    0071  66| C1 C0 08			 rol	 EAX,8
1   138	    0075  E8 FF88			 call	 ShowByteHexCode
1   139	    0078  66| C1 C0 08			 rol	 EAX,8
1   140	    007C  E8 FF81			 call	 ShowByteHexCode
1   141	    007F  C3				 ret
1   142	    0080			 ENDP ShowHexDWord
1   143
1   144
1   145					 ;**************************************************
1   146					 ;*	 Вивід байта на	екран в	двійковому коді	   *
1   147					 ;* Підпрограма	виводить вміст регістру	AL	   *
1   148					 ;* в двійковому коді в	задану позицію екрана.	   *
1   149					 ;* Координати позиції передаються через глобальні *
1   150					 ;* змінні ScreenString	і ScreenColumn.	Після	   *
1   151					 ;* виконання операції виводу відбувається автома- *
1   152					 ;* тичне збільшення значень цих змінних.	   *
1   153					 ;**************************************************
1   154	    0080			 PROC ShowByteBinCode near
1   155	    0080  60				 pusha
1   156	    0081  1E				 push	 DS
1   157	    0082  06				 push	 ES
1   158						 ; Копіюємо відображуваний байт	в BL
1   159	    0083  8A D8				 mov	 BL,AL
1   160	    0085  B8 0000s			 mov	 AX,DGROUP
1   161	    0088  8E D8				 mov	 DS,AX
1   162	    008A  FC				 cld
1   163						 ; Завантажити адресу "текстової" відеопам'яті в ES
1   164	    008B  B8 B800			 mov	 AX,0B800h
1   165	    008E  8E C0				 mov	 ES,AX
1   166						 ; Помножити номер рядка на довжину рядка в байтах
1   167	    0090  A1 0001r			 mov	 AX,[ScreenString]
1   168	    0093  BA 00A0			 mov	 DX,160
1   169	    0096  F7 E2				 mul	 DX
1   170						 ; Додати двічі	номер колонки
1   171	    0098  03 06	0003r			 add	 AX,[ScreenColumn]
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 4
t.asm



1   172	    009C  03 06	0003r			 add	 AX,[ScreenColumn]
1   173						 ; Переписати результат	в індексний регістр
1   174	    00A0  8B F8				 mov	 DI,AX
1   175
1   176					 ; Відобразити розряди числа (починаючи	зі старшого)
1   177	    00A2  8A 26	0000r			 mov	 AH,[TextColorAndBackground]
1   178	    00A6  B9 0008			 mov	 CX,8	;лічильник розрядів
1   179	    00A9  B0 30			 @@L0:	 mov	 AL,'0'
1   180						 ; Виділити черговий розряд числа 
1   181	    00AB  D0 C3				 rol	 BL,1
1   182	    00AD  73 02				 jnc	 @@L1
1   183	    00AF  B0 31				 mov	 AL,'1'
1   184						 ; Вивести розряд числа	на екран
1   185	    00B1  AB			 @@L1:	 stosw
1   186	    00B2  E2 F5				 loop	 @@L0
1   187
1   188					 ; Підготовка для виводу наступних байтів
1   189						 ; Перевести поточну позицію на	8 символів ліворуч
1   190	    00B4  83 06	0003r 08		 add	 [ScreenColumn],8
1   191						 ; Перевірити перетин правої границі екрана
1   192	    00B9  83 3E	0003r 50		 cmp	 [ScreenColumn],80
1   193	    00BE  72 09				 jb	 @@End
1   194						 ; Якщо	досягнута права	границя	екрана -
1   195						 ; перейти на наступний	рядок
1   196	    00C0  83 2E	0003r 50		 sub	 [ScreenColumn],80
1   197	    00C5  FF 06	0001r			 inc	 [ScreenString]
1   198					 ; Кінець підпрограми
1   199	    00C9  07			 @@End:	 pop	 ES
1   200	    00CA  1F				 pop	 DS
1   201	    00CB  61				 popa
1   202	    00CC  C3				 ret
1   203	    00CD			 ENDP ShowByteBinCode
1   204
1   205
1   206					 ;*******************************************************
1   207					 ;* Вивід 16-розрядного	числа на екран в двійковому коді*
1   208					 ;* Параметри:						*
1   209					 ;* AX - число,	яке буде виведено на екран.		*
1   210					 ;* Номер рядка	передається через глобальну		*
1   211					 ;* змінну ScreenString, номер стовпчика - через	*
1   212					 ;* змінну ScreenColumn, колір тексту визначається	*
1   213					 ;* глобальною змінною TextColorAndBackground.		*
1   214					 ;*******************************************************
1   215	    00CD			 PROC ShowBinWord NEAR
1   216	    00CD  C1 C0	08			 rol	 AX,8
1   217	    00D0  E8 FFAD			 call	 ShowByteBinCode
1   218	    00D3  FF 06	0003r			 inc	 [ScreenColumn]
1   219	    00D7  C1 C0	08			 rol	 AX,8
1   220	    00DA  E8 FFA3			 call	 ShowByteBinCode
1   221	    00DD  C3				 ret
1   222	    00DE			 ENDP ShowBinWord
1   223
1   224
1   225					 ;*******************************************************
1   226					 ;* Вивід 32-розрядного	числа на екран в двійковому коді*
1   227					 ;* Параметри:						*
1   228					 ;* EAX	- число, яке буде виведено на екран.		*
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 5
t.asm



1   229					 ;* Номер рядка	передається через глобальну		*
1   230					 ;* змінну ScreenString, номер стовпчика - через	*
1   231					 ;* змінну ScreenColumn, колір тексту визначається	*
1   232					 ;* глобальною змінною TextColorAndBackground.		*
1   233					 ;*******************************************************
1   234	    00DE			 PROC ShowBinDWord NEAR
1   235	    00DE  66| C1 C0 08			 rol	 EAX,8
1   236	    00E2  E8 FF9B			 call	 ShowByteBinCode
1   237	    00E5  FF 06	0003r			 inc	 [ScreenColumn]
1   238	    00E9  66| C1 C0 08			 rol	 EAX,8
1   239	    00ED  E8 FF90			 call	 ShowByteBinCode
1   240	    00F0  FF 06	0003r			 inc	 [ScreenColumn]
1   241	    00F4  66| C1 C0 08			 rol	 EAX,8
1   242	    00F8  E8 FF85			 call	 ShowByteBinCode
1   243	    00FB  FF 06	0003r			 inc	 [ScreenColumn]
1   244	    00FF  66| C1 C0 08			 rol	 EAX,8
1   245	    0103  E8 FF7A			 call	 ShowByteBinCode
1   246	    0106  C3				 ret
1   247	    0107			 ENDP ShowBinDWord
1   248
1   249
1   250					 ;*****************************************************
1   251					 ;*	 Вивід текстової строки	на екран	      *
1   252					 ;* Всі	параметри передаються через одну структуру:   *
1   253					 ;* перший байт	- номер	початкового рядка (0-24);     *
1   254					 ;* другий байт	- номер	початкової колонки (0-79);    *
1   255					 ;* далі йде рядок, обмежений нулем.		      *
1   256					 ;* Адреса структури передається через регістри	DS:SI.*
1   257					 ;* тичне збільшення значень цих змінних.	      *
1   258					 ;*****************************************************					    +
    259					 ****************
1   260	    0107			 PROC ShowString near
1   261	    0107  50				 push	 AX
1   262	    0108  53				 push	 BX
1   263	    0109  57				 push	 DI
1   264	    010A  06				 push	 ES
1   265					 ; Настроїти регістр ES	на глобальний сегмент даних
1   266	    010B  B8 0000s			 mov	 AX,DGROUP
1   267	    010E  8E C0				 mov	 ES,AX
1   268					 ; Запам'ятати колір текста в BL
1   269	    0110  26: 8A 1E 0000r		 mov	 BL,[ES:TextColorAndBackground]
1   270					 ; Настроїти регістр ES	на відеопам'ять
1   271	    0115  B8 B800			 mov	 AX,0B800h
1   272	    0118  8E C0				 mov	 ES,AX
1   273	    011A  FC				 cld
1   274					 ; Обчислити адресу для	рядка у	відеопам'яті
1   275						 ; Завантажити номер рядка екрана в AL і
1   276						 ; помножити його на довжину рядка в байтах
1   277	    011B  AC				 lodsb
1   278						 ; Перевірка: номер рядка не повинен перевищувати
1   279						 ; межу	нижньої	границі	екрана
1   280	    011C  3C 18				 cmp	 AL,24
1   281	    011E  77 29				 ja	 @@Error
1   282	    0120  B4 A0				 mov	 AH,160
1   283	    0122  F6 E4				 mul	 AH
1   284						 ; Переписати результат	в індексний регістр DI
1   285	    0124  8B F8				 mov	 DI,AX
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 6
t.asm



1   286						 ; Завантажити номер стовпчика і двічі
1   287						 ; додати його до DI
1   288	    0126  AC				 lodsb
1   289	    0127  3C 4F				 cmp	 AL,79	 ;номер	колонки	не повинен
1   290	    0129  77 1E				 ja	 @@Error ;перевищувати ширину екрана 
1   291	    012B  8A F8				 mov	 BH,AL	 ;запам'ятати номер колонки
1   292	    012D  32 E4				 xor	 AH,AH	 ;обнулити AH
1   293	    012F  03 F8				 add	 DI,AX
1   294	    0131  03 F8				 add	 DI,AX
1   295						 ; Завантажити атрибут кольору в AH
1   296	    0133  8A E3				 mov	 AH,BL
1   297	    0135			 @@L1:	 ; Завантажити черговий	символ рядка в AL
1   298	    0135  AC				 lodsb
1   299						 ; Перевірка на	0 (на кінець рядка)
1   300	    0136  22 C0				 and	 AL,AL
1   301	    0138  74 0A				 jz	 @@L2
1   302						 ; Перевірити номер колонки символу
1   303	    013A  80 FF	4F			 cmp	 BH,79
1   304	    013D  77 0A				 ja	 @@Error ;порушена права границя екрана
1   305						 ; Вивести символ на екран
1   306	    013F  AB				 stosw
1   307	    0140  FE C7				 inc	 BH	 ;збільшити номер колонки
1   308	    0142  EB F1				 jmp	 @@L1
1   309	    0144  07			 @@L2:	 pop	 ES
1   310	    0145  5F				 pop	 DI
1   311	    0146  5B				 pop	 BX
1   312	    0147  58				 pop	 AX
1   313	    0148  C3				 ret
1   314	    0149			 @@Error: ;Негайний вихід в DOS	через помилку
1   315	    0149  B4 4C				 mov	 AH,4Ch
1   316	    014B  CD 21				 int	 21h
1   317	    014D			 ENDP ShowString
1   318
1   319
1   320					 ;******************************************************
1   321					 ;*  Вивід текстового рядка заданого кольору на	екран  *
1   322					 ;* Всі	параметри передаються через одну структуру:    *
1   323					 ;* перший байт	- атрибут кольору і фону для рядка;    *
1   324					 ;* другий байт	- номер	початкового рядка (0-24);      *
1   325					 ;* третій байт	- номер	початкової колонки (0-79);     *
1   326					 ;* далі йде рядок, обмежений нулем.		       *
1   327					 ;* Адреса структури передається через регістри	DS:SI. *
1   328					 ;******************************************************
1   329	    014D			 PROC ShowColorString near
1   330	    014D  50				 push	 AX
1   331						 ; Запам'ятати колір, що використовується за замовчуванням
1   332	    014E  A0 0000r			 mov	 AL,[TextColorAndBackground]
1   333	    0151  50				 push	 AX
1   334						 ; Встановити колір рядка
1   335	    0152  FC				 cld
1   336	    0153  AC				 lodsb
1   337	    0154  A2 0000r			 mov	 [TextColorAndBackground],AL
1   338						 ; Використати функцію ShowString
1   339	    0157  E8 FFAD			 call	 ShowString
1   340						 ; Відновити колір, що використовується	за замовчуванням
1   341	    015A  58				 pop	 AX
1   342	    015B  A2 0000r			 mov	 [TextColorAndBackground],AL
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 7
t.asm



1   343	    015E  58				 pop	 AX
1   344	    015F  C3				 ret
1   345	    0160			 ENDP ShowColorString
1   346
1   347
1   348					 ;*********************************
1   349					 ;*  Всановити позицію курсору	  *
1   350					 ;* Вхідні параметри:		  *
1   351					 ;* ScreenString - номер рядка	  *
1   352					 ;* ScreenColumn - номер стовпчика*
1   353					 ;*********************************
1   354	    0160			 PROC SetCursorPosition	NEAR
1   355	    0160  60				 pusha
1   356					 ; Обчислення лінійної адреси курсору 
1   357	    0161  A1 0001r			 mov	 AX,[ScreenString]
1   358	    0164  BB 0050			 mov	 BX,80
1   359	    0167  F7 E3				 mul	 BX
1   360	    0169  03 06	0003r			 add	 AX,[ScreenColumn]
1   361	    016D  8A D8				 mov	 BL,AL ;запам'ятати молдший байт
1   362					 ; Прямий вивід	позиції	курсору
1   363					 ; в регістри відеоконтролера 
1   364	    016F  BA 03D4			 mov	 DX,3D4h
1   365						 ; Вивести старший байт	адреси курсору 
1   366	    0172  B0 0E				 mov	 AL,0Eh
1   367	    0174  EF				 out	 DX,AX
1   368						 ; Вивести молодший байт адреси	курсору 
1   369	    0175  FE C0				 inc	 AL
1   370	    0177  8A E3				 mov	 AH,BL
1   371	    0179  EF				 out	 DX,AX
1   372	    017A  61				 popa
1   373	    017B  C3				 ret
1   374	    017C			 ENDP SetCursorPosition
1   375
1   376
1   377					 ;*********************************************
1   378					 ;*	  Прийняти символ з клавіатури	      *
1   379					 ;* Процедура здійснює введення	символу	з     *
1   380					 ;* допомогою функції 00h переривання Int16h. *
1   381					 ;* Для	"текстових" керуючих клавіш замість   *
1   382					 ;* скан-кодів використовуються	ASCII-коди.   *
1   383					 ;* Вхідних параметрів немає.		      *
1   384					 ;* Функція повертає:			      *
1   385					 ;* AL - код символу;			      *
1   386					 ;* AH - керуючий код, якщо в AL нуль.	      *
1   387					 ;*********************************************
1   388	    017C			 PROC GetChar NEAR
1   389	    017C  B8 0000			 mov	 AX,0
1   390	    017F  CD 16				 int	 16h
1   391	    0181  22 C0				 and	 AL,AL
1   392	    0183  75 01				 jnz	 @@Get1
1   393	    0185  C3				 ret	 ;(в AL	- нуль,	в AH - керуючий	код)
1   394	    0186  3C 20			 @@Get1: cmp	 AL,32
1   395	    0188  73 05				 jnb	 @@Get2
1   396						 ; Переписати в	AH керуючий код
1   397	    018A  86 C4				 xchg	 AL,AH
1   398	    018C  B0 00				 mov	 AL,0
1   399	    018E  C3				 ret	 ;(в AL	- нуль,	в AH - керуючий	код)
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 8
t.asm



1   400	    018F  B4 00			 @@Get2: mov	 AH,0
1   401	    0191  C3				 ret	 ;(в AL	- код літери, в	AH - нуль)
1   402	    0192			 ENDP GetChar
1   403
1   404
1   405					 ;*************************************************
1   406					 ;*	   Прийняти символ з клавіатури,	  *
1   407					 ;*	       якщо він	є в буфері		  *
1   408					 ;* Процедура перевіряє	наявність символу в буфері*
1   409					 ;* клавіатури і зчитує	його, якщо він є.	  *
1   410					 ;* Вхідних параметрів немає.			  *
1   411					 ;* Функція повертає:				  *
1   412					 ;* AL - код символа;				  *
1   413					 ;* AH - керуючий код, якщо в AL нуль.		  *
1   414					 ;* Якщо в AL і	AH нулі	- натискань не було.	  *
1   415					 ;*************************************************
1   416	    0192			 PROC WaitChar NEAR
1   417					 ; Перевірити наявність	символу	в буфері клавіатури
1   418	    0192  B4 01				 mov	 AH,1
1   419	    0194  CD 16				 int	 16h
1   420	    0196  74 16				 jz	 @@NoInput
1   421					 ; Прийняти символ від клавіатури
1   422	    0198  B8 0000			 mov	 AX,0
1   423	    019B  CD 16				 int	 16h
1   424	    019D  22 C0				 and	 AL,AL
1   425	    019F  75 01				 jnz	 @@GET1
1   426	    01A1  C3				 ret	 ;в AL - нуль, в AH - керуючий код
1   427	    01A2  3C 20			 @@GET1: cmp	 AL,32
1   428	    01A4  73 05				 jnb	 @@GET2
1   429	    01A6  8A E0				 mov	 AH,AL ;переписати в AH	керуючий код
1   430	    01A8  B0 00				 mov	 AL,0
1   431	    01AA  C3				 ret	 ;в AL - нуль, в AH - керуючий код
1   432	    01AB  B4 00			 @@GET2: mov	 AH,0
1   433	    01AD  C3				 ret	 ;в AL - код літери, в AH - нуль
1   434	    01AE			 @@NoInput:
1   435	    01AE  33 C0				 xor	 AX,AX
1   436	    01B0  C3				 ret	 ;в AL і AH - нулі
1   437	    01B1			 ENDP WaitChar
1   438
1   439
1   440					 ;*************************************
1   441					 ;* Очистка екрана в текстовому	режимі*
1   442					 ;*  (процедура	параметрів не має)    *
1   443					 ;*************************************
1   444	    01B1			 PROC ClearScreen NEAR
1   445	    01B1  60				 pusha
1   446	    01B2  06				 push	 ES
1   447					 ; Настроїти ES:DI на "текстову" область відеопам'яті 
1   448	    01B3  B8 B800			 mov	 AX,0B800h
1   449	    01B6  8E C0				 mov	 ES,AX
1   450	    01B8  FC				 cld
1   451	    01B9  BF 0000			 mov	 DI,0
1   452					 ; Вивести 2000	"порожніх" символів (ASCII-код 0) з
1   453					 ; атрибутом "білий колір, чорний фон"
1   454	    01BC  B9 07D0			 mov	 CX,2000
1   455	    01BF  B8 0F00			 mov	 AX,0F00H
1   456	    01C2  F3> AB			 rep	 stosw
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 9
t.asm



1   457	    01C4  07				 pop	 ES
1   458	    01C5  61				 popa
1   459	    01C6  C3				 ret
1   460	    01C7			 ENDP ClearScreen
1   461
1   462
1   463					 ;*****************************************************
1   464					 ;* Подача звукового сигналу через убудований динамік *
1   465					 ;*	     (процедура	параметрів не має)	      *
1   466					 ;*****************************************************
1   467	    01C7			 PROC Beep NEAR
1   468	    01C7  50				 push	 AX
1   469	    01C8  52				 push	 DX
1   470					 ; Послати на термінал код "дзвінок" (07h)
1   471	    01C9  B4 02				 mov	 AH,2
1   472	    01CB  B2 07				 mov	 DL,7
1   473	    01CD  CD 21				 int	 21h
1   474	    01CF  5A				 pop	 DX
1   475	    01D0  58				 pop	 AX
1   476	    01D1  C3				 ret
1   477	    01D2			 ENDP Beep
1   478	    01D2			 ENDS
1   479
    480					       INCLUDE "lst5.inc"
1   481					 ;		       ‹€‘’€Ќѓ 2.5
1   482					 ;	   Њ­Ґ¬®­ЁзҐбЄЁҐ ®Ў®§­ зҐ­Ёп жўҐв®ў ¤«п
1   483					 ;	     жўҐв­®Ј® вҐЄбв®ў®Ј® ўЁ¤Ґ®аҐ¦Ё¬ 
1   484					 ;
1   485					 ; Ђўв®а вҐЄбв 	Їа®Ја ¬¬л Љг« Є®ў ‚« ¤Ё¬Ёа ѓҐ­­ ¤мҐўЁз.
1   486					 ; ” ©«	lst_2_05.inc, 05.03.2000.
1   487
1   488					 ; "Темні" кольори (можна використовувати для фону і тексу)
1   489		  = 0			 BLACK	      equ  0 ;чорний
1   490		  = 1			 BLUE	      equ  1 ;темно-синій
1   491		  = 2			 GREEN	      equ  2 ;темно-зелений
1   492		  = 3			 CYAN	      equ  3 ;бірюзовий	(ціан)
1   493		  = 4			 RED	      equ  4 ;темно-червоний
1   494		  = 5			 MAGENTA      equ  5 ;темно-фіолетовий
1   495		  = 6			 BROWN	      equ  6 ;коричневий
1   496		  = 7			 LIGHTGREY    equ  7 ;сірий
1   497					 ; "Світлі" кольори (тільки для	тексту)
1   498		  = 8			 DARKGREY     equ  8 ;темно-сірий
1   499		  = 9			 LIGHTBLUE    equ  9 ;синій
1   500		  = 10			 LIGHTGREEN   equ 10 ;зелений
1   501		  = 11			 LIGHTCYAN    equ 11 ;блакитний
1   502		  = 12			 LIGHTRED     equ 12 ;червоний
1   503		  = 13			 LIGHTMAGENTA equ 13 ;фіолетовий
1   504		  = 14			 YELLOW	      equ 14 ;жовтий
1   505		  = 15			 WHITE	      equ 15 ;білий
1   506
    507
    508	    0000			       SEGMENT sseg para stack 'STACK'
    509	    0000  0400*(??)		       DB 400h DUP(?)
    510	    0400			       ENDS
    511
    512	    0005			       DATASEG
    513					       ; Џ а ¬ҐваЁ ЇаЁбва®о PCI
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 10
t.asm



    514	    0005  ????			       VendorID	      DW ? ; ?¤Ґ­вЁд?Є в®а ўЁа®Ў­ЁЄ 
    515	    0007  ????			       DeviceID	      DW ? ; ?¤Ґ­вЁд?Є в®а ЇаЁбва®о
    516	    0009  ????????		       ClassCode      DD ? ; вЁЇ ЇаЁбва®о
    517	    000D  ????????		       BaseAddress0   DD ? ; Ў §®ў   ¤аҐб  0
    518	    0011  ????????		       BaseAddress1   DD ? ; Ў §®ў   ¤аҐб  1
    519	    0015  ????????		       BaseAddress2   DD ? ; Ў §®ў   ¤аҐб  2
    520	    0019  ????????		       BaseAddress3   DD ? ; Ў §®ў   ¤аҐб  3
    521	    001D  ????????		       BaseAddress4   DD ? ; Ў §®ў   ¤аҐб  4
    522	    0021  ????????		       BaseAddress5   DD ? ; Ў §®ў   ¤аҐб  5
    523	    0025  ??			       InterruptLine  DB ? ; ­®¬Ґа ЇҐаҐаЁў ­­п ?RQ, й® ўЁЄ®аЁбв®ўгувмбп
    524					       ; Љ®®а¤Ё­ вЁ ЇаЁбва®о PC?
    525	    0026  ??			       BusNumber      DB ? ;­®¬Ґа иЁ­Ё
    526	    0027  ??			       DeviceNumber   DB ? ; ­®¬Ґа ЇаЁбва®о ? ­®¬Ґа дг­Єж?х
    527					       ; ‹?зЁ«м­ЁЄ ®ЇҐа ж?© ­ вЁбЄ ­­п/ў?¤ЇгбЄ ­­п Є« ў?и
    528	    0028  ????			       PressCounter DW ?
    529					       ; ’ҐЄбв®ў? Ї®ў?¤®¬«Ґ­­п
    530	    002A  00 19	92 A5 E1 E2 E3+	       PCI DB 0,25,"’Ґбвгў ­­п дг­Єжi© PCI BIOS",0
    531		  A2 A0	AD AD EF 20 E4+
    532		  E3 AD	AA E6 69 A9 20+
    533		  50 43	49 20 42 49 4F+
    534		  53 00
    535	    0048  04 14	8F A0 E0 A0 AC+		   DB 4,20,"Џ а ¬ҐваЁ ўЁпў«Ґ­®Ј® Є®­ва®«Ґа  ¬®бвг е®бв ",0
    536		  A5 E2	E0 A8 20 A2 A8+
    537		  EF A2	AB A5 AD AE A3+
    538		  AE 20	AA AE AD E2 E0+
    539		  AE AB	A5 E0 A0 20 AC+
    540		  AE E1	E2 E3 20 E5 AE+
    541		  E1 E2	A0 00
    542	    0076  06 00	8D AE AC A5 E0+		   DB 6,0,"Ќ®¬Ґа иЁ­Ё:",0
    543		  20 E8	A8 AD A8 3A 00
    544	    0084  07 00	8D AE AC A5 E0+		   DB 7,0,"Ќ®¬Ґа ЇаЁбва®о:",0
    545		  20 AF	E0 A8 E1 E2 E0+
    546		  AE EE	3A 00
    547	    0096  08 00	8D AE AC A5 E0+		   DB 8,0,"Ќ®¬Ґа дг­Єжiх:",0
    548		  20 E4	E3 AD AA E6 69+
    549		  F5 3A	00
    550	    00A7  09 00	49 A4 A5 AD E2+		   DB 9,0,"I¤Ґ­вЁд?Є в®а ўЁа®Ў­ЁЄ :",0
    551		  A8 E4	3F AA A0 E2 AE+
    552		  E0 20	A2 A8 E0 AE A1+
    553		  AD A8	AA A0 3A 00
    554	    00C2  0A 00	49 A4 A5 AD E2+		   DB 10,0,"I¤Ґ­вЁдiЄ в®а ЇаЁбва®о:",0
    555		  A8 E4	69 AA A0 E2 AE+
    556		  E0 20	AF E0 A8 E1 E2+
    557		  E0 AE	EE 3A 00
    558	    00DC  0B 00	92 A8 AF 20 AF+		   DB 11,0,"’ЁЇ	ЇаЁбва®о:",0
    559		  E0 A8	E1 E2 E0 AE EE+
    560		  3A 00
    561	    00EC  0C 00	81 A0 A7 AE A2+		   DB 12,0,"Ѓ §®ў   ¤аҐб  0:",0
    562		  A0 20	A0 A4 E0 A5 E1+
    563		  A0 20	30 3A 00
    564	    00FF  0D 00	81 A0 A7 AE A2+		   DB 13,0,"Ѓ §®ў   ¤аҐб  1:",0
    565		  A0 20	A0 A4 E0 A5 E1+
    566		  A0 20	31 3A 00
    567	    0112  0E 00	81 A0 A7 AE A2+		   DB 14,0,"Ѓ §®ў   ¤аҐб  2:",0
    568		  A0 20	A0 A4 E0 A5 E1+
    569		  A0 20	32 3A 00
    570	    0125  0F 00	81 A0 A7 AE A2+		   DB 15,0,"Ѓ §®ў   ¤аҐб  3:",0
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 11
t.asm



    571		  A0 20	A0 A4 E0 A5 E1+
    572		  A0 20	33 3A 00
    573	    0138  10 00	81 A0 A7 AE A2+		   DB 16,0,"Ѓ §®ў   ¤аҐб  4:",0
    574		  A0 20	A0 A4 E0 A5 E1+
    575		  A0 20	34 3A 00
    576	    014B  11 00	81 A0 A7 AE A2+		   DB 17,0,"Ѓ §®ў   ¤аҐб  5:",0
    577		  A0 20	A0 A4 E0 A5 E1+
    578		  A0 20	35 3A 00
    579	    015E  12 00	8D AE AC A5 E0+		   DB 18,0,"Ќ®¬Ґа ЇҐаҐаЁў ­­п, й® ўЁЄ®аЁбв®ўгувмбп:",0
    580		  20 AF	A5 E0 A5 E0 A8+
    581		  A2 A0	AD AD EF 2C 20+
    582		  E9 AE	20 A2 A8 AA AE+
    583		  E0 A8	E1 E2 AE A2 E3+
    584		  F3 E2	EC E1 EF 3A 00
    585	    0188  18 1D	8D A0 E2 A8 E1+		   DB 24,29,"Ќ вЁб­iвм Ўг¤м-пЄг	Є« ўiиг",0
    586		  AD 69	E2 EC 20 A1 E3+
    587		  A4 EC	2D EF AA E3 20+
    588		  AA AB	A0 A2 69 E8 E3+
    589		  00
    590					       ; Џ®ў?¤®¬«Ґ­­п Їа® вҐ, й® ЇҐаҐаЁў ­­п ­Ґ	ўЁЄ®аЁбв®ўгувмбп
    591	    01A5  12 20	AD A5 20 A2 A8+	       NoIRQ DB	18,32,"­Ґ ўЁЄ®аЁбв®ўгувмбп",0
    592		  AA AE	E0 A8 E1 E2 AE+
    593		  A2 E3	F3 E2 EC E1 EF+
    594		  00
    595					       ; Џ®ў?¤®¬«Ґ­­п Їа® Ї®¬Ё«ЄЁ
    596	    01BB  0C 0C	12		       NotPCI DB LIGHTRED,12,18
    597	    01BE  91 A8	E1 E2 A5 AC A0+		      DB "‘ЁбвҐ¬  ­Ґ Їi¤ваЁ¬гу i­вҐадҐ©б PCI BIOS",0
    598		  20 AD	A5 20 AF 69 A4+
    599		  E2 E0	A8 AC E3 F3 20+
    600		  69 AD	E2 A5 E0 E4 A5+
    601		  A9 E1	20 50 43 49 20+
    602		  42 49	4F 53 00
    603	    01E6  0C 0C	16		       NotSVGA DB LIGHTRED,12,22
    604	    01E9  8A AE	AD E2 E0 AE AB+		       DB "Љ®­ва®«Ґа  ¬®бвг е®бв  ­Ґ §­ ©¤Ґ­®",0
    605		  A5 E0	A0 20 AC AE E1+
    606		  E2 E3	20 E5 AE E1 E2+
    607		  A0 20	AD A5 20 A7 AD+
    608		  A0 A9	A4 A5 AD AE 00
    609	    020C  0C 0C	16		       BadRegister DB LIGHTRED,12,22
    610	    020F  8D A5	A2 69 E0 AD A8+			   DB "ЌҐўiа­Ё©	­®¬Ґа аҐЈiбва ",0
    611		  A9 20	AD AE AC A5 E0+
    612		  20 E0	A5 A3 69 E1 E2+
    613		  E0 A0	00
    614	    0227  0C 18	11		       Exit DB LIGHTRED,24,17
    615	    022A  84 AB	EF 20 A2 A8 E5+		    DB "„«п ўЁе®¤г § Їа®Ја ¬Ё ­ вЁб­iвм	Ўг¤м-пЄг Є« ўiиг",0
    616		  AE A4	E3 20 A7 20 AF+
    617		  E0 AE	A3 E0 A0 AC A8+
    618		  20 AD	A0 E2 A8 E1 AD+
    619		  69 E2	EC 20 A1 E3 A4+
    620		  EC 2D	EF AA E3 20 AA+
    621		  AB A0	A2 69 E8 E3 00
    622	    025B			       ENDS
    623
    624	    01D2			       CODESEG
    625					       ;*****************************
    626					       ;* Ћб­®ў­Ё© ¬®¤г«м Їа®Ја ¬Ё  *
    627					       ;*****************************
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 12
t.asm



    628	    01D2			       PROC PCITest  near
    629	    01D2  B8 0000s			       mov     AX,DGROUP
    630	    01D5  8E D8				       mov     DS,AX
    631					       ; “бв ­®ўЁвЁ вҐЄбв®ўЁ© аҐ¦Ё¬ ? ®зЁбвЁвЁ ҐЄа ­
    632	    01D7  B8 0003			       mov     AX,3
    633	    01DA  CD 10				       int     10h
    634					       ; ‘е®ў вЁ Єгаб®а	- § Ўа вЁ §  ­Ё¦­о Ја ­Ёжо ҐЄа ­ 
    635	    01DC  C7 06	0001r 0019		       mov     [ScreenString],25
    636	    01E2  C7 06	0003r 0000		       mov     [ScreenColumn],0
    637	    01E8  E8 FF75			       call    SetCursorPosition
    638					       ; “бв ­®ўЁвЁ §Ґ«Ґ­Ё© Є®«?а бЁ¬ў®«?ў ? з®а­Ё© д®­
    639	    01EB  C6 06	0000r 0A		       mov     [TextColorAndBackground],LIGHTGREEN
    640					       ; ‚ЁўҐбвЁ вҐЄбв®ў? Ї®ў?¤®¬«Ґ­­п ­  ҐЄа ­
    641	    01F0  B9 0010			       mov     CX,16
    642	    01F3  BE 002Ar			       mov     SI,offset PCI
    643	    01F6			       @@NextString:
    644	    01F6  E8 FF0E			       call    ShowString
    645	    01F9  E2 FB				       loop    @@NextString
    646					       ; “бв ­®ўЁвЁ ¦®ўвЁ© Є®«?а бЁ¬ў®«?ў ? з®а­Ё© д®­
    647	    01FB  C6 06	0000r 0E		       mov     [TextColorAndBackground],YELLOW
    648
    649					       ; ЋЇЁвгў ­­п PCI-гбва®©бвў
    650					       ; ЏҐаҐў?аЁвЁ ­ пў­?бвм PC? B?OS
    651	    0200  B8 B101			       mov     AX,0B101h
    652	    0203  CD 1A				       int     1Ah
    653	    0205  0F 82	01C6			       jc      @@PCIBIOSNotFound
    654	    0209  66| 81 FA 20494350		       cmp     EDX,20494350h
    655	    0210  0F 85	01BB			       jne     @@PCIBIOSNotFound
    656					       ;‡­ ©в Є®­ва®«Ґа	¬®бвг е®бв 
    657					       ; (ЇаЁбва?© вЁЇг	090000h)
    658	    0214  B8 B103			       mov     AX,0B103h
    659	    0217  66| B9 00060000		       mov     ECX,060000h
    660	    021D  BE 0000			       mov     SI,0
    661	    0220  CD 1A				       int     1Ah
    662	    0222  0F 82	01A4			       jc      @@DeviceNotFound
    663	    0226  88 3E	0026r			       mov     [BusNumber],BH
    664	    022A  88 1E	0027r			       mov     [DeviceNumber],BL
    665
    666					       ; Ћ¤Ґа¦ вЁ ?¤Ґ­вЁд?Є в®а	ўЁа®Ў­ЁЄ 
    667	    022E  B8 B109			       mov     AX,0B109h ; зЁв вЁ б«®ў®
    668	    0231  BF 0000			       mov     DI,0	 ; §бгў	б«®ў 
    669	    0234  CD 1A				       int     1Ah
    670	    0236  0F 82	018B			       jc      @@BadRegisterNumber
    671	    023A  89 0E	0005r			       mov     [VendorID],CX
    672					       ; Ћ¤Ґа¦ вЁ ?¤Ґ­вЁд?Є в®а	ЇаЁбва®о
    673	    023E  B8 B109			       mov     AX,0B109h ; зЁв вЁ б«®ў®
    674	    0241  BF 0002			       mov     DI,2	 ; §бгў	б«®ў 
    675	    0244  CD 1A				       int     1Ah
    676	    0246  0F 82	017B			       jc      @@BadRegisterNumber
    677	    024A  89 0E	0007r			       mov     [DeviceID],CX
    678					       ; Ћ¤Ґа¦ вЁ вЁЇ ЇаЁбва®о (б ¬®ЇҐаҐў?аЄ )
    679	    024E  B8 B10A			       mov     AX,0B10Ah ; зЁв вЁ Ї®¤ў?©­Ґ б«®ў®
    680	    0251  BF 0008			       mov     DI,8	 ; §бгў	б«®ў 
    681	    0254  CD 1A				       int     1Ah
    682	    0256  0F 82	016B			       jc      @@BadRegisterNumber
    683	    025A  66| C1 E9 08			       shr     ECX,8
    684	    025E  66| 89 0E 0009r		       mov     [ClassCode],ECX
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 13
t.asm



    685					       ; Ћ¤Ґа¦ вЁ Ў §®ўг  ¤аҐбг	0
    686	    0263  B8 B10A			       mov     AX,0B10Ah ; зЁв вЁ Ї®¤ў?©­Ґ б«®ў®
    687	    0266  BF 0010			       mov     DI,10h	 ; §бгў	б«®ў 
    688	    0269  CD 1A				       int     1Ah
    689	    026B  0F 82	0156			       jc      @@BadRegisterNumber
    690	    026F  66| 89 0E 000Dr		       mov     [BaseAddress0],ECX
    691					       ; Ћ¤Ґа¦ вЁ Ў §®ўг  ¤аҐбг	1
    692	    0274  B8 B10A			       mov     AX,0B10Ah ; зЁв вЁ Ї®¤ў?©­Ґ б«®ў®
    693	    0277  BF 0014			       mov     DI,14h	 ; §бгў	б«®ў 
    694	    027A  CD 1A				       int     1Ah
    695	    027C  0F 82	0145			       jc      @@BadRegisterNumber
    696	    0280  66| 89 0E 0011r		       mov     [BaseAddress1],ECX
    697					       ; Ћ¤Ґа¦ вЁ Ў §®ўг  ¤аҐбг	2
    698	    0285  B8 B10A			       mov     AX,0B10Ah ; зЁв вЁ Ї®¤ў?©­Ґ б«®ў®
    699	    0288  BF 0018			       mov     DI,18h	 ; §бгў	б«®ў 
    700	    028B  CD 1A				       int     1Ah
    701	    028D  0F 82	0134			       jc      @@BadRegisterNumber
    702	    0291  66| 89 0E 0015r		       mov     [BaseAddress2],ECX
    703					       ; Ћ¤Ґа¦ вЁ Ў §®ўг  ¤аҐбг	3
    704	    0296  B8 B10A			       mov     AX,0B10Ah ; зЁв вЁ Ї®¤ў?©­Ґ б«®ў®
    705	    0299  BF 001C			       mov     DI,1Ch	 ; §бгў	б«®ў 
    706	    029C  CD 1A				       int     1Ah
    707
    708	    029E  0F 82	0123			       jc      @@BadRegisterNumber
    709	    02A2  66| 89 0E 0019r		       mov     [BaseAddress3],ECX
    710					       ; Ћ¤Ґа¦ вЁ Ў §®ўг  ¤аҐбг	4
    711	    02A7  B8 B10A			       mov     AX,0B10Ah ; зЁв вЁ Ї®¤ў?©­Ґ б«®ў®
    712	    02AA  BF 0020			       mov     DI,20h	 ; §бгў	б«®ў 
    713	    02AD  CD 1A				       int     1Ah
    714	    02AF  0F 82	0112			       jc      @@BadRegisterNumber
    715	    02B3  66| 89 0E 001Dr		       mov     [BaseAddress4],ECX
    716					       ; Ћ¤Ґа¦ вЁ Ў §®ўг  ¤аҐбг	5
    717	    02B8  B8 B10A			       mov     AX,0B10Ah ; зЁв вЁ Ї®¤ў?©­Ґ б«®ў®
    718	    02BB  BF 0024			       mov     DI,24h	 ; §бгў	б«®ў 
    719	    02BE  CD 1A				       int     1Ah
    720	    02C0  0F 82	0101			       jc      @@BadRegisterNumber
    721	    02C4  66| 89 0E 0021r		       mov     [BaseAddress5],ECX
    722
    723					       ; Ћ¤Ґа¦ вЁ ­®¬Ґа	ЇҐаҐаЁў ­­п IRQ,
    724					       ; й® ўЁЄ®аЁбв®ўгувмбп ЇаЁбва®у¬
    725	    02C9  B8 B108			       mov     AX,0B108h ; зЁв вЁ Ў ©в
    726	    02CC  BF 003C			       mov     DI,3Ch	 ; §бгў	Ў ©в 
    727	    02CF  CD 1A				       int     1Ah
    728	    02D1  0F 82	00F0			       jc      @@BadRegisterNumber
    729	    02D5  88 0E	0025r			       mov     [InterruptLine],CL
    730
    731					       ; ‚ЁўҐбвЁ ®ваЁ¬ ­? ¤ ­? ­  ҐЄа ­	ў
    732					       ; и?бв­ ¤жпвЁа?з­®¬г Є®¤?
    733						       ; ‚?¤®Ўа §ЁвЁ ®б­®ў­? Ї а ¬ҐваЁ ЇаЁбва®о
    734	    02D9  C7 06	0001r 0006		       mov     [ScreenString],6
    735	    02DF  C7 06	0003r 000C		       mov     [ScreenColumn],12
    736	    02E5  A0 0026r			       mov     AL,[BusNumber]
    737	    02E8  E8 FD15			       call    ShowByteHexCode
    738
    739	    02EB  FF 06	0001r			       inc     [ScreenString]
    740	    02EF  C7 06	0003r 0012		       mov     [ScreenColumn],18
    741	    02F5  A0 0027r			       mov     AL,[DeviceNumber]
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 14
t.asm



    742	    02F8  C0 E8	03			       shr     AL,3
    743	    02FB  E8 FD02			       call    ShowByteHexCode
    744
    745	    02FE  FF 06	0001r			       inc     [ScreenString]
    746	    0302  C7 06	0003r 000F		       mov     [ScreenColumn],15
    747	    0308  A0 0027r			       mov     AL,[DeviceNumber]
    748	    030B  24 07				       and     AL,111b
    749	    030D  E8 FCF0			       call    ShowByteHexCode
    750
    751	    0310  FF 06	0001r			       inc     [ScreenString]
    752	    0314  C7 06	0003r 001C		       mov     [ScreenColumn],28
    753	    031A  A1 0005r			       mov     AX,[VendorID]
    754	    031D  E8 FD38			       call    ShowHexWord
    755
    756	    0320  FF 06	0001r			       inc     [ScreenString]
    757	    0324  C7 06	0003r 001A		       mov     [ScreenColumn],26
    758	    032A  A1 0007r			       mov     AX,[DeviceID]
    759	    032D  E8 FD28			       call    ShowHexWord
    760
    761	    0330  FF 06	0001r			       inc     [ScreenString]
    762	    0334  C7 06	0003r 0010		       mov     [ScreenColumn],16
    763	    033A  66| A1 0009r			       mov     EAX,[ClassCode]
    764	    033E  E8 FD22			       call    ShowHexDWord
    765
    766						       ; ‚?¤®Ўа §ЁвЁ Ў §®ў?  ¤аҐбЁ
    767	    0341  FF 06	0001r			       inc     [ScreenString]
    768	    0345  C7 06	0003r 0011		       mov     [ScreenColumn],17
    769	    034B  66| A1 000Dr			       mov     EAX,[BaseAddress0]
    770	    034F  E8 FD11			       call    ShowHexDWord
    771
    772	    0352  FF 06	0001r			       inc     [ScreenString]
    773	    0356  C7 06	0003r 0011		       mov     [ScreenColumn],17
    774	    035C  66| A1 0011r			       mov     EAX,[BaseAddress1]
    775	    0360  E8 FD00			       call    ShowHexDWord
    776
    777	    0363  FF 06	0001r			       inc     [ScreenString]
    778
    779	    0367  C7 06	0003r 0011		       mov     [ScreenColumn],17
    780	    036D  66| A1 0015r			       mov     EAX,[BaseAddress2]
    781	    0371  E8 FCEF			       call    ShowHexDWord
    782
    783	    0374  FF 06	0001r			       inc     [ScreenString]
    784	    0378  C7 06	0003r 0011		       mov     [ScreenColumn],17
    785	    037E  66| A1 0019r			       mov     EAX,[BaseAddress3]
    786	    0382  E8 FCDE			       call    ShowHexDWord
    787
    788	    0385  FF 06	0001r			       inc     [ScreenString]
    789	    0389  C7 06	0003r 0011		       mov     [ScreenColumn],17
    790	    038F  66| A1 001Dr			       mov     EAX,[BaseAddress4]
    791	    0393  E8 FCCD			       call    ShowHexDWord
    792
    793	    0396  FF 06	0001r			       inc     [ScreenString]
    794	    039A  C7 06	0003r 0011		       mov     [ScreenColumn],17
    795	    03A0  66| A1 0021r			       mov     EAX,[BaseAddress5]
    796	    03A4  E8 FCBC			       call    ShowHexDWord
    797
    798						       ; ‚ЁўҐбвЁ ­®¬Ґа ЇҐаҐаЁў ­­п ?RQ,	й® ўЁЄ®аЁбв®ўгувмбп
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 15
t.asm



    799	    03A7  FF 06	0001r			       inc     [ScreenString]
    800	    03AB  C7 06	0003r 0028		       mov     [ScreenColumn],40
    801	    03B1  A0 0025r			       mov     AL,[InterruptLine]
    802	    03B4  3C FF				       cmp     AL,0FFh	    ; ЇҐаҐаЁў ­­п ўЁЄ®аЁбв®ўгувмбп?
    803	    03B6  74 05				       je      @@IRQNotUsed
    804	    03B8  E8 FC45			       call    ShowByteHexCode
    805	    03BB  EB 21				       jmp short @@End
    806	    03BD			       @@IRQNotUsed:
    807	    03BD  BE 01A5r			       mov     SI,offset NoIRQ
    808	    03C0  E8 FD44			       call    ShowString
    809	    03C3  EB 19				       jmp short @@End
    810
    811					       ; ЋЎа®ЎЄ  Ї®¬Ё«®Є
    812	    03C5			       @@BadRegisterNumber:
    813						       ; ЌҐў?а­Ё© ­®¬Ґа	аҐЈ?бва 
    814	    03C5  BE 020Cr			       mov     SI,offset BadRegister
    815	    03C8  EB 08				       jmp     @@ErrorMessage
    816	    03CA			       @@DeviceNotFound:
    817						       ; ЌҐ §­ ©¤Ґ­Ё© Є®­ва®«Ґа	¬®бвг е®бв 
    818	    03CA  BE 01E6r			       mov     SI,offset NotSVGA
    819	    03CD  EB 03				       jmp     @@ErrorMessage
    820	    03CF			       @@PCIBIOSNotFound:
    821						       ; ЌҐ Ї?¤ваЁ¬гувмбп PC? B?OS
    822	    03CF  BE 01BBr			       mov     SI,offset NotPCI
    823	    03D2			       @@ErrorMessage:
    824						       ; ‚Ё¤ вЁ	Ї®ў?¤®¬«Ґ­­п Їа® вЁЇ Ї®¬Ё«ЄЁ
    825	    03D2  E8 FDDC			       call    ClearScreen
    826	    03D5  E8 FD75			       call    ShowColorString
    827	    03D8  BE 0227r			       mov     SI,offset Exit
    828	    03DB  E8 FD6F			       call    ShowColorString
    829
    830					       ; ‡ Є?­зҐ­­п а®Ў®вЁ
    831	    03DE			       @@End:  ; Ћз?Єгў вЁ ­ вЁбЄ ­­п Ўг¤м-пЄ®х	Є« ў?и?
    832	    03DE  E8 FD9B			       call    GetChar
    833					       ; ЏҐаҐгбв ­®ўЁвЁ	вҐЄбв®ўЁ© аҐ¦Ё¬	? ®зЁбвЁвЁ ҐЄа ­
    834	    03E1  B8 0003			       mov     AX,3
    835	    03E4  CD 10				       int     10h
    836					       ; ‚Ёе?¤ г DOS
    837	    03E6  B4 4C				       mov     AH,4Ch
    838	    03E8  CD 21				       int     21h
    839	    03EA			       ENDP PCITest
    840					       END  PCITest
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 16
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/05/06"
??FILENAME		Text   "t	"
??TIME			Text   "19:40:37"
??VERSION		Number 0314
@32BIT			Text   0			   #3
@@BADREGISTERNUMBER	Near   T_TEXT:03C5		   670	676  682  689  695  701	 708  714  720	728  #812
@@DEVICENOTFOUND	Near   T_TEXT:03CA		   662	#816
@@END			Near   T_TEXT:0054		   91  #96
@@END			Near   T_TEXT:00C9		   193	#199
@@END			Near   T_TEXT:03DE		   805	809  #831
@@ERROR			Near   T_TEXT:0149		   281	290  304  #314
@@ERRORMESSAGE		Near   T_TEXT:03D2		   815	819  #823
@@GET1			Near   T_TEXT:0186		   392	#394
@@GET1			Near   T_TEXT:01A2		   425	#427
@@GET2			Near   T_TEXT:018F		   395	#400
@@GET2			Near   T_TEXT:01AB		   428	#432
@@IRQNOTUSED		Near   T_TEXT:03BD		   803	#806
@@L0			Near   T_TEXT:00A9		   #179	 186
@@L1			Near   T_TEXT:00B1		   182	#185
@@L1			Near   T_TEXT:0135		   #297	 308
@@L2			Near   T_TEXT:0144		   301	#309
@@M0			Near   T_TEXT:0032		   70  #73
@@M1			Near   T_TEXT:003E		   81  #84
@@NEXTSTRING		Near   T_TEXT:01F6		   #643	 645
@@NOINPUT		Near   T_TEXT:01AE		   420	#434
@@PCIBIOSNOTFOUND	Near   T_TEXT:03CF		   653	655  #820
@CODE			Text   T_TEXT			   #3  #3  #23	#624
@CODESIZE		Text   1			   #3
@CPU			Text   0F8FH			   #2
@CURSEG			Text   T_TEXT			   #14	#23  #508  #512	 #624
@DATA			Text   DGROUP			   #3
@DATASIZE		Text   0			   #3
@FILENAME		Text   T
@INTERFACE		Text   00H			   #3
@MODEL			Text   4			   #3
@STACK			Text   DGROUP			   #3
@WORDSIZE		Text   2			   #2  #14  #23	 #508  #512  #624
BADREGISTER		Byte   DGROUP:020C		   #609	 814
BASEADDRESS0		Dword  DGROUP:000D		   #517	 690  769
BASEADDRESS1		Dword  DGROUP:0011		   #518	 696  774
BASEADDRESS2		Dword  DGROUP:0015		   #519	 702  780
BASEADDRESS3		Dword  DGROUP:0019		   #520	 709  785
BASEADDRESS4		Dword  DGROUP:001D		   #521	 715  790
BASEADDRESS5		Dword  DGROUP:0021		   #522	 721  795
BEEP			Near   T_TEXT:01C7		   #467
BLACK			Text   0			   #489
BLUE			Text   1			   #490
BROWN			Text   6			   #495
BUSNUMBER		Byte   DGROUP:0026		   #525	 663  736
CLASSCODE		Dword  DGROUP:0009		   #516	 684  763
CLEARSCREEN		Near   T_TEXT:01B1		   #444	 825
CYAN			Text   3			   #492
DARKGREY		Text   8			   #498
DEVICEID		Word   DGROUP:0007		   #515	 677  758
Turbo Assembler	 Version 3.2	    12/05/06 19:40:37	    Page 17
Symbol Table



DEVICENUMBER		Byte   DGROUP:0027		   #526	 664  741  747
EXIT			Byte   DGROUP:0227		   #614	 827
GETCHAR			Near   T_TEXT:017C		   #388	 832
GREEN			Text   2			   #491
INTERRUPTLINE		Byte   DGROUP:0025		   #523	 729  801
LIGHTBLUE		Text   9			   #499
LIGHTCYAN		Text   11			   #501
LIGHTGREEN		Text   10			   #500	 639
LIGHTGREY		Text   7			   #496
LIGHTMAGENTA		Text   13			   #503
LIGHTRED		Text   12			   #502	 596  603  609	614
MAGENTA			Text   5			   #494
NOIRQ			Byte   DGROUP:01A5		   #591	 807
NOTPCI			Byte   DGROUP:01BB		   #596	 822
NOTSVGA			Byte   DGROUP:01E6		   #603	 818
PCI			Byte   DGROUP:002A		   #530	 642
PCITEST			Near   T_TEXT:01D2		   #628	 840
PRESSCOUNTER		Word   DGROUP:0028		   #528
RED			Text   4			   #493
SCREENCOLUMN		Word   DGROUP:0003		   #20	55  56	88  90	94  171	 172  190  192	196  218  237  240  243	  +
							   360	636  735  740  746  752	 757  762  768	773  779  784  789  794	  +
							   800
SCREENSTRING		Word   DGROUP:0001		   #19	50  95	167  197  357  635  734	 739  745  751	756  761  767  772+
							   777	783  788  793  799
SETCURSORPOSITION	Near   T_TEXT:0160		   #354	 637
SHOWBINDWORD		Near   T_TEXT:00DE		   #234
SHOWBINWORD		Near   T_TEXT:00CD		   #215
SHOWBYTEBINCODE		Near   T_TEXT:0080		   #154	 217  220  236	239  242  245
SHOWBYTEHEXCODE		Near   T_TEXT:0000		   #33	115  117  134  136  138	 140  737  743	749  804
SHOWCOLORSTRING		Near   T_TEXT:014D		   #329	 826  828
SHOWHEXDWORD		Near   T_TEXT:0063		   #132	 764  770  775	781  786  791  796
SHOWHEXWORD		Near   T_TEXT:0058		   #113	 754  759
SHOWSTRING		Near   T_TEXT:0107		   #260	 339  644  808
TEXTCOLORANDBACKGROUND	Byte   DGROUP:0000		   #17	62  177	 269  332  337	342  639  647
VENDORID		Word   DGROUP:0005		   #514	 671  753
WAITCHAR		Near   T_TEXT:0192		   #416
WHITE			Text   15			   #505
YELLOW			Text   14			   #504	 647

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #3  3  38  160  266	629
  _DATA			16  025B Word	Public	DATA	   #3  #14  #512
SSEG			16  0400 Para	Stack	STACK	   #508
T_TEXT			16  03EA Word	Public	CODE	   #3  3  #23  23  #624	 624
