Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 1
Linmode.asm



      1					 ; Використання	лiнiйної адресацiї для вiдображення
      2					 ; на екранi змiсту оперативної	памятi
      3					 ;
      4					 ; РЛА - Режим Лiнiйної	адресацiї
      5					 ;
      6					 IDEAL
      7					 P386
      8					 LOCALS
      9	    0000			 MODEL MEDIUM
     10
     11					 INCLUDE "KEYS.INC"	 ; мнемонiчнi коди клавiш
1    12					 ;		       ЛИСТИНГ 2.3
1    13					 ;  Мнемонические обозначения кодов управляющих	клавиш
1    14					 ;
1    15					 ; Автор текста	программы Кулаков Владимир Геннадьевич.
1    16					 ; Файл	lst_2_03.inc, 05.03.2000.
1    17
1    18					 ; Для клавиш, традиционно выполняющих определенные
1    19					 ; функции, приведены краткие комментарии справа.
1    20
1    21					 ; Для "текстовых" управляющих клавиш вместо скан-кодов
1    22					 ; используются	ASCII-коды:
1    23		  = 8			 B_RUBOUT  equ	  8 ;забой
1    24		  = 9			 B_TAB	   equ	  9 ;табуляция
1    25		  = 10			 B_LF	   equ	 10 ;перевод строки
1    26		  = 13			 B_ENTER   equ	 13 ;возврат каретки
1    27		  = 27			 B_ESC	   equ	 27 ;"Esc"
1    28
1    29					 ; Скан-коды функциональных клавиш:
1    30		  = 59			 F1	   equ	 59 ;вызов подсказки на	экран
1    31		  = 60			 F2	   equ	 60
1    32		  = 61			 F3	   equ	 61
1    33		  = 62			 F4	   equ	 62
1    34		  = 63			 F5	   equ	 63
1    35		  = 64			 F6	   equ	 64
1    36		  = 65			 F7	   equ	 65
1    37		  = 66			 F8	   equ	 66
1    38		  = 67			 F9	   equ	 67
1    39		  = 68			 F10	   equ	 68 ;выход из программы
1    40
1    41					 ; Скан-коды клавиш дополнительной клавиатуры:
1    42		  = 71			 B_HOME	   equ	 71 ;перейти в начало
1    43		  = 72			 B_UP	   equ	 72 ;стрелка вверх
1    44		  = 73			 B_PGUP	   equ	 73 ;на	страницу вверх
1    45		  = 75			 B_BS	   equ	 75 ;стрелка влево
1    46		  = 77			 B_FWD	   equ	 77 ;стрелка вправо
1    47		  = 79			 B_END	   equ	 79 ;перейти в конец
1    48		  = 80			 B_DN	   equ	 80 ;стрелка вниз
1    49		  = 81			 B_PGDN	   equ	 81 ;на	страницу вниз
1    50		  = 82			 B_INS	   equ	 82 ;переключить режим (вставка/замещение)
1    51		  = 83			 B_DEL	   equ	 83 ;удалить символ над	курсором
1    52
1    53					 ; Скан-коды часто используемых	комбинаций клавиш:
1    54		  = 104			 ALT_F1	   equ	104
1    55		  = 105			 ALT_F2	   equ	105
1    56		  = 3			 CTRL_C	   equ	  3
1    57		  = 115			 CTRL_BS   equ	115
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 2
Linmode.asm



1    58		  = 116			 CTRL_FWD  equ	116
1    59		  = 117			 CTRL_END  equ	117
1    60		  = 118			 CTRL_PGDN equ	118
1    61		  = 119			 CTRL_HOME equ	119
1    62		  = 122			 CTRL_PGUP equ	122
1    63
     64					 INCLUDE "COLORS.INC"	 ; мнемонiчнi коди кольорiв
1    65					 ;		       ЛИСТИНГ 2.5
1    66					 ;	   Мнемонические обозначения цветов для
1    67					 ;	     цветного текстового видеорежима
1    68					 ;
1    69					 ; Автор текста	программы Кулаков Владимир Геннадьевич.
1    70					 ; Файл	lst_2_05.inc, 05.03.2000.
1    71
1    72					 ; "Темные" цвета (можно использовать для фона и текста)
1    73		  = 0			 BLACK	      equ  0 ;черный
1    74		  = 1			 BLUE	      equ  1 ;темно-синий
1    75		  = 2			 GREEN	      equ  2 ;темно-зеленый
1    76		  = 3			 CYAN	      equ  3 ;бирюзовый	(циан)
1    77		  = 4			 RED	      equ  4 ;темно-красный
1    78		  = 5			 MAGENTA      equ  5 ;темно-фиолетовый
1    79		  = 6			 BROWN	      equ  6 ;коричневый
1    80		  = 7			 LIGHTGREY    equ  7 ;серый
1    81					 ; "Светлые" цвета (только для текста)
1    82		  = 8			 DARKGREY     equ  8 ;темно-серый
1    83		  = 9			 LIGHTBLUE    equ  9 ;синий
1    84		  = 10			 LIGHTGREEN   equ 10 ;зеленый
1    85		  = 11			 LIGHTCYAN    equ 11 ;голубой
1    86		  = 12			 LIGHTRED     equ 12 ;красный
1    87		  = 13			 LIGHTMAGENTA equ 13 ;фиолетовый
1    88		  = 14			 YELLOW	      equ 14 ;желтый
1    89		  = 15			 WHITE	      equ 15 ;белый
1    90
     91					 INCLUDE "SWITCH.INC"	 ; пiдпрограма переводу	сегментого регiстра GS у РЛА
1    92					 ;		       ЛИСТИНГ 3.1
1    93					 ;	   Подпрограмма, устанавливающая режим
1    94					 ;		линейной адресации данных
1    95					 ;
1    96					 ; Автор текста	программы Кулаков Владимир Геннадьевич.
1    97					 ; Файл	lst_3_01.inc, 08.03.2000
1    98
1    99					 ; Порт, управляющий запретом немаскируемых прерываний
1   100		  = 0070h		 CMOS_ADDR	equ  0070h
1   101		  = 0071h		 CMOS_DATA	equ  0071h
1   102					 ; Селекторы сегментов
1   103		  = 0008h		 SYS_PROT_CS	equ  0008h
1   104		  = 0010h		 SYS_REAL_SEG	equ  0010h
1   105		  = 0018h		 SYS_MONDO_SEG	equ  0018h
1   106
1   107	    0000			 CODESEG
1   108					 ;**********************************************
1   109					 ;* ВКЛЮЧЕНИЕ РЕЖИМА ЛИНЕЙНОЙ АДРЕСАЦИИ	ПАМЯТИ *
1   110					 ;*	  (процедура параметров	не имеет)      *
1   111					 ;**********************************************
1   112	    0000			 PROC Initialization NEAR
1   113	    0000  66| 60			 pushad
1   114					 ; Сохранить значения сегментных регистров в
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 3
Linmode.asm



1   115					 ; реальном режиме (кроме GS)
1   116	    0002  2E: 89 26 003Er		 mov	 [CS:Save_SP],SP
1   117	    0007  8C D0				 mov	 AX,SS
1   118	    0009  2E: A3 0040r			 mov	 [CS:Save_SS],AX
1   119	    000D  8C D8				 mov	 AX,DS
1   120	    000F  2E: A3 0042r			 mov	 [CS:Save_DS],AX
1   121					 ; (работаем теперь только с кодовым сегментом)
1   122	    0013  8C C8				 mov	 AX,CS
1   123	    0015  2E: A3 01DDr			 mov	 [word ptr CS:Self_Mod_CS],AX
1   124	    0019  8E D8				 mov	 DS,AX
1   125	    001B  FA				 cli
1   126	    001C  8E D0				 mov	 SS,AX
1   127	    001E  BC 016Br			 mov	 SP,offset Local_Stk_Top
1   128	    0021  FB				 sti
1   129
1   130					 ; Установить режим линейной адресации
1   131	    0022  E8 0147			 call	 SetLAddrModeForGS
1   132
1   133					 ; Восстановить	значения сегментных регистров
1   134	    0025  FA				 cli
1   135	    0026  2E: 8B 26 003Er		 mov	 SP,[CS:Save_SP]
1   136	    002B  2E: A1 0040r			 mov	 AX,[CS:Save_SS]
1   137	    002F  8E D0				 mov	 SS,AX
1   138	    0031  2E: A1 0042r			 mov	 AX,[CS:Save_DS]
1   139	    0035  8E D8				 mov	 DS,AX
1   140	    0037  FB				 sti
1   141					 ; Разрешить работу линии A20
1   142	    0038  E8 01B8			 call	 Enable_A20
1   143	    003B  66| 61			 popad
1   144	    003D  C3				 ret
1   145	    003E			 ENDP Initialization
1   146
1   147
1   148					 ; Область сохранения значений сегментных регистров
1   149	    003E  ????			 Save_SP DW ?
1   150	    0040  ????			 Save_SS DW ?
1   151	    0042  ????			 Save_DS DW ?
1   152					 ; Указатель на	GDT
1   153	    0044  ????????????????	 GDTPtr	 DQ ?
1   154					 ; Таблица дескрипторов	сегментов для
1   155					 ; входа в защищенный режим
1   156	    004C  0000 0000 0000 0000	 GDT DW	00000h,00000h,00000h,00000h ;не	используется
1   157	    0054  FFFF 0000 9A00 0000	     DW	0FFFFh,00000h,09A00h,00000h ;сегмент кода CS
1   158	    005C  FFFF 0000 9200 0000	     DW	0FFFFh,00000h,09200h,00000h ;сегмент данных DS
1   159	    0064  FFFF 0000 9200 008F	     DW	0FFFFh,00000h,09200h,0008Fh ;сегмент GS
1   160					 ; Локальный стек для защищенного режима
1   161					 ; (организован	внутри кодового	сегмента)
1   162	    006C			 label GDTEnd word
1   163	    006C  FF*(FF)			 DB 255	DUP(0FFh)
1   164	    016B  FF			 Local_Stk_Top DB (0FFh)
1   165
1   166
1   167					 ;*********************************************
1   168					 ;*	   ОТМЕНИТЬ ПРЕДЕЛ СЕГМЕНТА GS	      *
1   169					 ;* Процедура изменяет содержимое теневого    *
1   170					 ;* регистра GS	таким образом, что становится *
1   171					 ;* возможной линейная адресация через него   *
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 4
Linmode.asm



1   172					 ;* 4 Gb памяти	в реальном режиме	      *
1   173					 ;*********************************************
1   174	    016C			 PROC SetLAddrModeForGS	near
1   175					 ; Вычислить линейный адрес кодового сегмента
1   176	    016C  8C C8				 mov	 AX,CS
1   177	    016E  66| 0F B7 C0			 movzx	 EAX,AX
1   178	    0172  66| C1 E0 04			 shl	 EAX,4	 ;умножить номер параграфа на 16
1   179	    0176  66| 8B D8			 mov	 EBX,EAX ;сохранить линейный адрес в EBX
1   180					 ; Занести младшее слово линейного адреса в дескрипторы
1   181					 ; сегментов кода и данных
1   182	    0179  2E: A3 0056r			 mov	 [word ptr CS:GDT+10],AX
1   183	    017D  2E: A3 005Er			 mov	 [word ptr CS:GDT+18],AX
1   184						 ; Переставить местами старшее и младшее слова
1   185	    0181  66| C1 C8 10			 ror	 EAX,16
1   186					 ; Занести биты	16-23 линейного	адреса в дескрипторы
1   187					 ; сегментов кода и данных
1   188	    0185  2E: A2 0058r			 mov	 [byte ptr CS:GDT+12],AL
1   189	    0189  2E: A2 0060r			 mov	 [byte ptr CS:GDT+20],AL
1   190					 ; Установить предел (Limit) и базу (Base) для GDTR
1   191	    018D  81 C3	004Cr			 add	 bx, offset GDT
1   192	    0191  2E: C7 06 0044r 001F		 mov [word ptr CS:GDTPtr],(offset GDTEnd-GDT-1)
1   193	    0198  66| 2E: 89 1E	0046r		 mov	 [dword	ptr CS:GDTPtr+2],EBX
1   194					 ; Сохранить регистр флагов
1   195	    019E  9C				 pushf
1   196					 ; Запретить прерывания, так как таблица прерываний IDT
1   197					 ; не сформирована для защищенного режима
1   198	    019F  FA				 cli
1   199					 ; Запретить немаскируемые прерывания NMI
1   200	    01A0  E4 70				 in	 AL,CMOS_ADDR
1   201	    01A2  8A E0				 mov	 AH,AL
1   202	    01A4  0C 80				 or	 AL,080h      ;установить старший разряд
1   203	    01A6  E6 70				 out	 CMOS_ADDR,AL ;не затрагивая остальные
1   204	    01A8  80 E4	80			 and	 AH,080h
1   205						 ; Запомнить старое состояние маски NMI
1   206	    01AB  8A EC				 mov	 CH,AH
1   207					 ; Перейти в защищенный	режим
1   208	    01AD  2E: 0F 01 16 0044r		 lgdt	 [fword	ptr CS:GDTPtr]
1   209	    01B3  8C CB				 mov	 BX,CS	  ;запомнить сегмент кода
1   210	    01B5  0F 20	C0			 mov	 EAX,CR0
1   211	    01B8  0C 01				 or	 AL,01b	  ;установить бит PE
1   212	    01BA  0F 22	C0			 mov	 CR0,EAX  ;защита разрешена
1   213						 ; Безусловный дальний переход на метку	SetPMode
1   214						 ; (очистить очередь команд и перезагрузить CS)
1   215	    01BD  EA					 DB	 0EAh
1   216	    01BE  01C2r					 DW	 (offset SetPMode)
1   217	    01C0  0008					 DW	 SYS_PROT_CS
1   218	    01C2			 SetPMode:
1   219						 ; Подготовить границы сегментов
1   220	    01C2  B8 0010			 mov	 AX,SYS_REAL_SEG
1   221	    01C5  8E D0				 mov	 SS,AX
1   222	    01C7  8E D8				 mov	 DS,AX
1   223	    01C9  8E C0				 mov	 ES,AX
1   224	    01CB  8E E0				 mov	 FS,AX
1   225						 ; Снять ограничения с сегмента	GS
1   226	    01CD  B8 0018			 mov	 AX,SYS_MONDO_SEG
1   227	    01D0  8E E8				 mov	 GS,AX
1   228					 ; Вернуться в реальный	режим
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 5
Linmode.asm



1   229	    01D2  0F 20	C0			 mov	 EAX,CR0
1   230	    01D5  24 FE				 and	 AL,11111110b ;сбросить	бит PE
1   231	    01D7  0F 22	C0			 mov	 CR0,EAX      ;защита отключена
1   232
1   233						 ; Безусловный дальний переход на метку	SetRMode
1   234						 ; (очистить очередь команд и перезагрузить CS)
1   235	    01DA  EA				     DB	0EAh
1   236	    01DB  01DFr				     DW	(offset	SetRMode)
1   237	    01DD  ????			 Self_Mod_CS DW	?
1   238
1   239	    01DF			 SetRMode:
1   240						 ; Регистры стека и данных
1   241						 ; настроить на	сегмент	кода
1   242	    01DF  8E D3				 mov	 SS,BX
1   243	    01E1  8E DB				 mov	 DS,BX
1   244						 ; Обнулить дополнительные сегментные
1   245						 ; регистры данных (GS не трогать!)
1   246	    01E3  33 C0				 xor	 AX,AX
1   247	    01E5  8E C0				 mov	 ES,AX
1   248	    01E7  8E E0				 mov	 FS,AX
1   249						 ; Возврат в реальный режим,
1   250						 ; прерывания снова разрешены
1   251	    01E9  E4 70				 in	 AL,CMOS_ADDR
1   252	    01EB  24 7F				 and	 AL,07Fh
1   253	    01ED  0A C5				 or	 AL,CH
1   254	    01EF  E6 70				 out	 CMOS_ADDR,AL
1   255	    01F1  9D				 popf
1   256	    01F2  C3				 ret
1   257	    01F3			 ENDP SetLAddrModeForGS
1   258
1   259
1   260					 ;****************************************
1   261					 ;* Разрешить работу с памятью выше 1 Мб *
1   262					 ;****************************************
1   263	    01F3			 PROC Enable_A20 near
1   264	    01F3  E8 000F			 call	 Wait8042BufferEmpty
1   265	    01F6  B0 D1				 mov	 AL,0D1h ;команда управления линий A20
1   266	    01F8  E6 64				 out	 64h,AL
1   267	    01FA  E8 0008			 call	 Wait8042BufferEmpty
1   268	    01FD  B0 DF				 mov	 AL,0DFh ;разрешить работу линии
1   269	    01FF  E6 60				 out	 60h,AL
1   270	    0201  E8 0001			 call	 Wait8042BufferEmpty
1   271	    0204  C3				 ret
1   272	    0205			 ENDP Enable_A20
1   273
1   274
1   275					 ;***********************************************
1   276					 ;*   ОЖИДАНИЕ ОЧИСТКИ ВХОДНОГО	БУФЕРА I8042	*
1   277					 ;* При	выходе из процедуры:			*
1   278					 ;* флаг ZF установлен - нормальное завершение,	*
1   279					 ;* флаг ZF сброшен - ошибка тайм-аута.		*
1   280					 ;***********************************************
1   281	    0205			 proc Wait8042BufferEmpty near
1   282	    0205  51				 push	 CX
1   283	    0206  B9 FFFF			 mov	 CX,0FFFFh  ;задать число циклов
1   284	    0209  E4 64			 @@kb:	 in	 AL,64h	    ;получить статус
1   285	    020B  A8 02				 test	 AL,10b	    ;буфер i8042 свободен?
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 6
Linmode.asm



1   286	    020D  E0 FA				 loopnz	 @@kb	    ;если нет, то цикл
1   287	    020F  59				 pop	 CX
1   288						 ; (если при выходе сброшен флаг ZF - ошибка)
1   289	    0210  C3				 ret
1   290	    0211			 endp Wait8042BufferEmpty
1   291	    0211			 ENDS
1   292
    293					 INCLUDE "IO.INC"	 ; пiдпрограми вводу/виводу даних на екран
1   294					 ;		       ЛИСТИНГ 2.2
1   295					 ;	Процедуры ввода/вывода общего назначения
1   296					 ;	 для работы в цветном текстовом	режиме
1   297					 ;
1   298					 ; Автор текста	программы Кулаков Владимир Геннадьевич.
1   299					 ; Файл	lst_2_02.inc, 10.03.2000.
1   300
1   301	    0000			 DATASEG
1   302					 ; Цвет	и фон выводимого текста	(по умолчанию установим
1   303					 ; вывод белого	текста по черному фону)
1   304	    0000  0F			 TextColorAndBackground	DB 0Fh
1   305					 ; Начальная позиция для вывода	текстовой строки на экран
1   306	    0001  ????			 ScreenString DW ?
1   307	    0003  ????			 ScreenColumn DW ?
1   308	    0005			 ENDS
1   309
1   310	    0211			 CODESEG
1   311					 ;*******************************************************
1   312					 ;*    ВЫВОД БАЙТА НА ЭКРАН В ШЕСТНАДЦАТЕРИЧНОМ	КОДЕ	*
1   313					 ;* Подпрограмма выводит содержимое регистра AL		*
1   314					 ;* в шестнадцатеричном	коде в заданную	позицию	экрана.	*
1   315					 ;* Координаты позиции передаются через	глобальные	*
1   316					 ;* переменные ScreenString и ScreenColumn. После	*
1   317					 ;* выполнения операции	вывода происходит автомати-	*
1   318					 ;* ческое приращение значений этих переменных.		*
1   319					 ;*******************************************************
1   320	    0211			 PROC ShowByteHexCode near
1   321	    0211  60				 pusha
1   322	    0212  1E				 push	 DS
1   323	    0213  06				 push	 ES
1   324						 ; Настроить DS	на глобальный сегмент данных
1   325	    0214  BF 0000s			 mov	 DI,DGROUP
1   326	    0217  8E DF				 mov	 DS,DI
1   327						 ; Настроить строковые команды процессора на
1   328						 ; автоинкрементный режим (движение "вперед")
1   329	    0219  FC				 cld
1   330
1   331					 ; Настроить пару ES:DI	для прямого вывода в видеопамять
1   332	    021A  50				 push	 AX
1   333						 ; Загрузить адрес сегмента видеоданных	в ES
1   334	    021B  B8 B800			 mov	 AX,0B800h
1   335	    021E  8E C0				 mov	 ES,AX
1   336						 ; Умножить номер строки на длину строки в байтах
1   337	    0220  A1 0001r			 mov	 AX,[ScreenString]
1   338	    0223  BA 00A0			 mov	 DX,160
1   339	    0226  F7 E2				 mul	 DX
1   340						 ; Прибавить к полученному произведению	номер
1   341						 ; колонки (дважды)
1   342	    0228  03 06	0003r			 add	 AX,[ScreenColumn]
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 7
Linmode.asm



1   343	    022C  03 06	0003r			 add	 AX,[ScreenColumn]
1   344						 ; Переписать результат	в индексный регистр
1   345	    0230  8B F8				 mov	 DI,AX
1   346	    0232  58				 pop	 AX
1   347
1   348					 ; Использовать	цвет символов, заданный	по умолчанию
1   349	    0233  8A 26	0000r			 mov	 AH,[TextColorAndBackground]
1   350					 ; Вывести старший разряд числа
1   351	    0237  50				 push	 AX
1   352						 ; Выделить старший разряд
1   353	    0238  C0 E8	04			 shr	 AL,4
1   354						 ; Преобразовать старший разряд	в код ASCII
1   355	    023B  04 30				 add	 AL,'0'
1   356	    023D  3C 39				 cmp	 AL,'9'
1   357	    023F  76 02				 jbe	 @@M0
1   358	    0241  04 07				 add	 AL,'A'-'9'- 1
1   359						 ; Вывести разряд числа	на экран
1   360	    0243  AB			 @@M0:	 stosw
1   361	    0244  58				 pop	 AX
1   362					 ; Вывести младший разряд числа
1   363						 ; Выделить младший разряд числа
1   364	    0245  24 0F				 and	 AL,0FH
1   365						 ; Преобразовать младший разряд	в код ASCII
1   366	    0247  04 30				 add	 AL,'0'
1   367	    0249  3C 39				 cmp	 AL,'9'
1   368	    024B  76 02				 jbe	 @@M1
1   369	    024D  04 07				 add	 AL,'A'-'9'- 1
1   370						 ; Вывести разряд числа	на экран
1   371	    024F  AB			 @@M1:	 stosw
1   372
1   373					 ; Подготовка для вывода следующих байтов
1   374						 ; Перевести текущую позицию на	2 символа влево
1   375	    0250  83 06	0003r 02		 add	 [ScreenColumn],2
1   376						 ; Проверить пересечение правой	границы	экрана
1   377	    0255  83 3E	0003r 50		 cmp	 [ScreenColumn],80
1   378	    025A  72 09				 jb	 @@End
1   379						 ; Если	достигнута правая граница экрана -
1   380						 ; перейти на следующую	строку
1   381	    025C  83 2E	0003r 50		 sub	 [ScreenColumn],80
1   382	    0261  FF 06	0001r			 inc	 [ScreenString]
1   383	    0265  07			 @@End:	 pop	 ES
1   384	    0266  1F				 pop	 DS
1   385	    0267  61				 popa
1   386	    0268  C3				 ret
1   387	    0269			 ENDP ShowByteHexCode
1   388
1   389
1   390					 ;*****************************************************
1   391					 ;*	    ВЫВОД 16-РАЗРЯДНОГО	СЛОВА НА ЭКРАН	      *
1   392					 ;*		 В ШЕСТНАДЦАТЕРИЧНОМ КОДЕ	      *
1   393					 ;* Параметры:					      *
1   394					 ;* AX - число,	которое	будет выведено на экран.      *
1   395					 ;* Номер строки передается через глобальную	      *
1   396					 ;* переменную ScreenString, номер столбца - через    *
1   397					 ;* переменную ScreenColumn, цвет текста определяется *
1   398					 ;* глобальной переменой TextColorAndBackground.      *
1   399					 ;*****************************************************
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 8
Linmode.asm



1   400	    0269			 PROC ShowHexWord NEAR
1   401	    0269  86 C4				 xchg	 AL,AH
1   402	    026B  E8 FFA3			 call	 ShowByteHexCode
1   403	    026E  86 C4				 xchg	 AL,AH
1   404	    0270  E8 FF9E			 call	 ShowByteHexCode
1   405	    0273  C3				 ret
1   406	    0274			 ENDP ShowHexWord
1   407
1   408
1   409					 ;*****************************************************
1   410					 ;*	    ВЫВОД 32-РАЗРЯДНОГО	СЛОВА НА ЭКРАН	      *
1   411					 ;*		 В ШЕСТНАДЦАТЕРИЧНОМ КОДЕ	      *
1   412					 ;* Параметры:					      *
1   413					 ;* EAX	- число, которое будет выведено	на экран.     *
1   414					 ;* Номер строки передается через глобальную	      *
1   415					 ;* переменную ScreenString, номер столбца - через    *
1   416					 ;* переменную ScreenColumn, цвет текста определяется *
1   417					 ;* глобальной переменой TextColorAndBackground.      *
1   418					 ;*****************************************************
1   419	    0274			 PROC ShowHexDWord NEAR
1   420	    0274  66| C1 C0 08			 rol	 EAX,8
1   421	    0278  E8 FF96			 call	 ShowByteHexCode
1   422	    027B  66| C1 C0 08			 rol	 EAX,8
1   423	    027F  E8 FF8F			 call	 ShowByteHexCode
1   424	    0282  66| C1 C0 08			 rol	 EAX,8
1   425	    0286  E8 FF88			 call	 ShowByteHexCode
1   426	    0289  66| C1 C0 08			 rol	 EAX,8
1   427	    028D  E8 FF81			 call	 ShowByteHexCode
1   428	    0290  C3				 ret
1   429	    0291			 ENDP ShowHexDWord
1   430
1   431
1   432					 ;**************************************************
1   433					 ;*	 ВЫВОД БАЙТА НА	ЭКРАН В	ДВОИЧНОМ КОДЕ	   *
1   434					 ;* Подпрограмма выводит содержимое регистра AL	   *
1   435					 ;* в двоичном коде в указанную	позицию	экрана.	   *
1   436					 ;* Координаты позиции передаются через	глобальные *
1   437					 ;* переменные ScreenString и ScreenColumn. После  *
1   438					 ;* выполнения операции	вывода происходит автома-  *
1   439					 ;* тическое приращение	значений этих переменных.  *
1   440					 ;**************************************************
1   441	    0291			 PROC ShowByteBinCode near
1   442	    0291  60				 pusha
1   443	    0292  1E				 push	 DS
1   444	    0293  06				 push	 ES
1   445						 ; Копируем отображаемый байт в	BL
1   446	    0294  8A D8				 mov	 BL,AL
1   447	    0296  B8 0000s			 mov	 AX,DGROUP
1   448	    0299  8E D8				 mov	 DS,AX
1   449	    029B  FC				 cld
1   450						 ; Загрузить адрес "текстовой" видеопамяти в ES
1   451	    029C  B8 B800			 mov	 AX,0B800h
1   452	    029F  8E C0				 mov	 ES,AX
1   453						 ; Умножить номер строки на длину строки в байтах
1   454	    02A1  A1 0001r			 mov	 AX,[ScreenString]
1   455	    02A4  BA 00A0			 mov	 DX,160
1   456	    02A7  F7 E2				 mul	 DX
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 9
Linmode.asm



1   457						 ; Прибавить дважды номер колонки
1   458	    02A9  03 06	0003r			 add	 AX,[ScreenColumn]
1   459	    02AD  03 06	0003r			 add	 AX,[ScreenColumn]
1   460						 ; Переписать результат	в индексный регистр
1   461	    02B1  8B F8				 mov	 DI,AX
1   462
1   463					 ; Отобразить разряды числа (начиная со	старшего)
1   464	    02B3  8A 26	0000r			 mov	 AH,[TextColorAndBackground]
1   465	    02B7  B9 0008			 mov	 CX,8	;счетчик разрядов
1   466	    02BA  B0 30			 @@L0:	 mov	 AL,'0'
1   467						 ; Выделить очередной разряд числа
1   468	    02BC  D0 C3				 rol	 BL,1
1   469	    02BE  73 02				 jnc	 @@L1
1   470	    02C0  B0 31				 mov	 AL,'1'
1   471						 ; Вывести разряд числа	на экран
1   472	    02C2  AB			 @@L1:	 stosw
1   473	    02C3  E2 F5				 loop	 @@L0
1   474
1   475					 ; Подготовка для вывода следующих байтов
1   476						 ; Перевести текущую позицию на	8 символов влево
1   477	    02C5  83 06	0003r 08		 add	 [ScreenColumn],8
1   478						 ; Проверить пересечение правой	границы	экрана
1   479	    02CA  83 3E	0003r 50		 cmp	 [ScreenColumn],80
1   480	    02CF  72 09				 jb	 @@End
1   481						 ; Если	достигнута правая граница экрана -
1   482						 ; перейти на следующую	строку
1   483	    02D1  83 2E	0003r 50		 sub	 [ScreenColumn],80
1   484	    02D6  FF 06	0001r			 inc	 [ScreenString]
1   485					 ; Конец подпрограммы
1   486	    02DA  07			 @@End:	 pop	 ES
1   487	    02DB  1F				 pop	 DS
1   488	    02DC  61				 popa
1   489	    02DD  C3				 ret
1   490	    02DE			 ENDP ShowByteBinCode
1   491
1   492
1   493					 ;******************************************************
1   494					 ;* ВЫВОД 16-РАЗРЯДНОГО	СЛОВА НА ЭКРАН В ДВОИЧНОМ КОДЕ *
1   495					 ;* Параметры:					       *
1   496					 ;* AX - число,	которое	будет выведено на экран.       *
1   497					 ;* Номер строки передается через глобальную	       *
1   498					 ;* переменную ScreenString, номер столбца - через     *
1   499					 ;* переменную ScreenColumn, цвет текста определяется  *
1   500					 ;* глобальной переменой TextColorAndBackground.       *
1   501					 ;******************************************************
1   502	    02DE			 PROC ShowBinWord NEAR
1   503	    02DE  C1 C0	08			 rol	 AX,8
1   504	    02E1  E8 FFAD			 call	 ShowByteBinCode
1   505	    02E4  FF 06	0003r			 inc	 [ScreenColumn]
1   506	    02E8  C1 C0	08			 rol	 AX,8
1   507	    02EB  E8 FFA3			 call	 ShowByteBinCode
1   508	    02EE  C3				 ret
1   509	    02EF			 ENDP ShowBinWord
1   510
1   511	    02EF			 PROC ShowBinDWord NEAR
1   512	    02EF  66| C1 C0 08			 rol	 EAX,8
1   513	    02F3  E8 FF9B			 call	 ShowByteBinCode
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 10
Linmode.asm



1   514	    02F6  FF 06	0003r			 inc	 [ScreenColumn]
1   515	    02FA  66| C1 C0 08			 rol	 EAX,8
1   516	    02FE  E8 FF90			 call	 ShowByteBinCode
1   517	    0301  FF 06	0003r			 inc	 [ScreenColumn]
1   518	    0305  66| C1 C0 08			 rol	 EAX,8
1   519	    0309  E8 FF85			 call	 ShowByteBinCode
1   520	    030C  FF 06	0003r			 inc	 [ScreenColumn]
1   521	    0310			 ENDP ShowBinDWord
1   522
1   523	    0310			 PROC ShowString near
1   524	    0310  50				 push	 AX
1   525	    0311  53				 push	 BX
1   526	    0312  57				 push	 DI
1   527	    0313  06				 push	 ES
1   528					 ; Настраить регистр ES	на глобальный сегмент данных
1   529	    0314  B8 0000s			 mov	 AX,DGROUP
1   530	    0317  8E C0				 mov	 ES,AX
1   531					 ; Запоминить цвет текста в BL
1   532	    0319  26: 8A 1E 0000r		 mov	 BL,[ES:TextColorAndBackground]
1   533					 ; Настраить регистр ES	на видеопамять
1   534	    031E  B8 B800			 mov	 AX,0B800h
1   535	    0321  8E C0				 mov	 ES,AX
1   536	    0323  FC				 cld
1   537					 ; Вычислить адрес для строки в	видеопамяти
1   538						 ; Загрузить номер строки экрана в AL и
1   539						 ; умножить его	на длину строки	в байтах
1   540	    0324  AC				 lodsb
1   541						 ; Проверка: номер строки не должен превышать
1   542						 ; предел нижней границы экрана
1   543	    0325  3C 18				 cmp	 AL,24
1   544	    0327  77 29				 ja	 @@Error
1   545	    0329  B4 A0				 mov	 AH,160
1   546	    032B  F6 E4				 mul	 AH
1   547						 ; Переписать результат	в индексный регистр DI
1   548	    032D  8B F8				 mov	 DI,AX
1   549						 ; Загрузить номер столбца и дважды
1   550						 ; прибавить его к DI
1   551	    032F  AC				 lodsb
1   552	    0330  3C 4F				 cmp	 AL,79	 ;номер	колонки	не должен
1   553	    0332  77 1E				 ja	 @@Error ;превышить ширины экрана
1   554	    0334  8A F8				 mov	 BH,AL	 ;запомнить номер колонки
1   555	    0336  32 E4				 xor	 AH,AH	 ;обнулить AH
1   556	    0338  03 F8				 add	 DI,AX
1   557	    033A  03 F8				 add	 DI,AX
1   558						 ; Загрузить атрибут цвета в AH
1   559	    033C  8A E3				 mov	 AH,BL
1   560	    033E			 @@L1:	 ; Загрузить очередной символ строки в AL
1   561	    033E  AC				 lodsb
1   562						 ; Проверка на 0 (на конец строки)
1   563	    033F  22 C0				 and	 AL,AL
1   564	    0341  74 0A				 jz	 @@L2
1   565						 ; Проверить номер колонки символа
1   566	    0343  80 FF	4F			 cmp	 BH,79
1   567	    0346  77 0A				 ja	 @@Error ;нарушена правая граница экрана
1   568						 ; Вывести символ на экран
1   569	    0348  AB				 stosw
1   570	    0349  FE C7				 inc	 BH	 ;увеличить номер колонки
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 11
Linmode.asm



1   571	    034B  EB F1				 jmp	 @@L1
1   572	    034D  07			 @@L2:	 pop	 ES
1   573	    034E  5F				 pop	 DI
1   574	    034F  5B				 pop	 BX
1   575	    0350  58				 pop	 AX
1   576	    0351  C3				 ret
1   577	    0352			 @@Error: ;Немедленный выход в DOS по ошибке
1   578	    0352  B4 4C				 mov	 AH,4Ch
1   579	    0354  CD 21				 int	 21h
1   580	    0356			 ENDP ShowString
1   581
1   582
1   583					 ;*****************************************************
1   584					 ;*  ВЫВОД ТЕКСТОВОЙ СТРОКИ ЗАДАННОГО ЦВЕТА НА ЭКРАН  *
1   585					 ;* Все	параметры передаются через одну	структуру:    *
1   586					 ;* первый байт	- атрибут цвета	и фона для строки;    *
1   587					 ;* второй байт	- номер	начальной строкиа (0-24);     *
1   588					 ;* третий байт	- номер	начальной колонки (0-79);     *
1   589					 ;* далее идет строка, ограниченная нулем.	      *
1   590					 ;* Адрес структуры передается через регистры DS:SI.  *
1   591					 ;*****************************************************
1   592	    0356			 PROC ShowColorString near
1   593	    0356  50				 push	 AX
1   594						 ; Запомнить цвет, используемый	по умолчанию
1   595	    0357  A0 0000r			 mov	 AL,[TextColorAndBackground]
1   596	    035A  50				 push	 AX
1   597						 ; Установить цвет строки
1   598	    035B  FC				 cld
1   599	    035C  AC				 lodsb
1   600	    035D  A2 0000r			 mov	 [TextColorAndBackground],AL
1   601						 ; Использовать	функцию	ShowString
1   602	    0360  E8 FFAD			 call	 ShowString
1   603						 ; Восстановить	цвет, используемый по умолчанию
1   604	    0363  58				 pop	 AX
1   605	    0364  A2 0000r			 mov	 [TextColorAndBackground],AL
1   606	    0367  58				 pop	 AX
1   607	    0368  C3				 ret
1   608	    0369			 ENDP ShowColorString
1   609
1   610
1   611					 ;********************************
1   612					 ;*  УСТАНОВИТЬ	ПОЗИЦИЮ	КУРСОРА	 *
1   613					 ;* Входные параметры:		 *
1   614					 ;* ScreenString - номер строки	 *
1   615					 ;* ScreenColumn - номер столбца *
1   616					 ;********************************
1   617	    0369			 PROC SetCursorPosition	NEAR
1   618	    0369  60				 pusha
1   619					 ; Вычисление линейного	адреса курсора
1   620	    036A  A1 0001r			 mov	 AX,[ScreenString]
1   621	    036D  BB 0050			 mov	 BX,80
1   622	    0370  F7 E3				 mul	 BX
1   623	    0372  03 06	0003r			 add	 AX,[ScreenColumn]
1   624	    0376  8A D8				 mov	 BL,AL ;запомнить младший байт
1   625					 ; Прямой вывод	позиции	курсора
1   626					 ; в регистры видеоконтроллера
1   627	    0378  BA 03D4			 mov	 DX,3D4h
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 12
Linmode.asm



1   628						 ; Вывести старший байт	адреса курсора
1   629	    037B  B0 0E				 mov	 AL,0Eh
1   630	    037D  EF				 out	 DX,AX
1   631						 ; Вывести младший байт	адреса курсора
1   632	    037E  FE C0				 inc	 AL
1   633	    0380  8A E3				 mov	 AH,BL
1   634	    0382  EF				 out	 DX,AX
1   635	    0383  61				 popa
1   636	    0384  C3				 ret
1   637	    0385			 ENDP SetCursorPosition
1   638
1   639
1   640					 ;*********************************************
1   641					 ;*	  ПРИНЯТЬ СИМВОЛ ОТ КЛАВИАТУРЫ	      *
1   642					 ;* Процедура осуществляет ввод	символа	с     *
1   643					 ;* помощью функции 00h	прерывания Int16h.    *
1   644					 ;* Для	"текстовых" управляющих	клавиш вместо *
1   645					 ;* скан-кодов используются ASCII-коды.	      *
1   646					 ;* Входных параметров нет.		      *
1   647					 ;* Функция возвращает:			      *
1   648					 ;* AL - код символа;			      *
1   649					 ;* AH - управляющий код, если в AL ноль.     *
1   650					 ;*********************************************
1   651	    0385			 PROC GetChar NEAR
1   652	    0385  B8 0000			 mov	 AX,0
1   653	    0388  CD 16				 int	 16h
1   654	    038A  22 C0				 and	 AL,AL
1   655	    038C  75 01				 jnz	 @@Get1
1   656	    038E  C3				 ret	 ;(в AL	- ноль,	в AH - управляющий код)
1   657	    038F  3C 20			 @@Get1: cmp	 AL,32
1   658	    0391  73 05				 jnb	 @@Get2
1   659						 ; Переписать в	AH управляющий код
1   660	    0393  86 C4				 xchg	 AL,AH
1   661	    0395  B0 00				 mov	 AL,0
1   662	    0397  C3				 ret	 ;(в AL	- ноль,	в AH - управляющий код)
1   663	    0398  B4 00			 @@Get2: mov	 AH,0
1   664	    039A  C3				 ret	 ;(в AL	- код буквы, в AH - ноль)
1   665	    039B			 ENDP GetChar
1   666
1   667
1   668					 ;************************************************
1   669					 ;*	   ПРИНЯТЬ СИМВОЛ ОТ КЛАВИАТУРЫ,	 *
1   670					 ;*	       ЕСЛИ ОН ЕСТЬ В БУФЕРЕ		 *
1   671					 ;* Процедура проверяет	наличие	символа	в буфере *
1   672					 ;* клавиатуры и считывает его,	если он	есть.	 *
1   673					 ;* Входных параметров нет.			 *
1   674					 ;* Функция возвращает:				 *
1   675					 ;* AL - код символа;				 *
1   676					 ;* AH - управляющий код, если в AL ноль.	 *
1   677					 ;* Если в AL и	AH нули	- нажатий не было.	 *
1   678					 ;************************************************
1   679	    039B			 PROC WaitChar NEAR
1   680					 ; Проверить наличие символа в буфере клавиатуры
1   681	    039B  B4 01				 mov	 AH,1
1   682	    039D  CD 16				 int	 16h
1   683	    039F  74 16				 jz	 @@NoInput
1   684					 ; Принять символ от клавиатуры
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 13
Linmode.asm



1   685	    03A1  B8 0000			 mov	 AX,0
1   686	    03A4  CD 16				 int	 16h
1   687	    03A6  22 C0				 and	 AL,AL
1   688	    03A8  75 01				 jnz	 @@GET1
1   689	    03AA  C3				 ret	 ;в AL - ноль, в AH - управляющий код
1   690	    03AB  3C 20			 @@GET1: cmp	 AL,32
1   691	    03AD  73 05				 jnb	 @@GET2
1   692	    03AF  8A E0				 mov	 AH,AL ;переписать в AH	управляющий код
1   693	    03B1  B0 00				 mov	 AL,0
1   694	    03B3  C3				 ret	 ;в AL - ноль, в AH - управляющий код
1   695	    03B4  B4 00			 @@GET2: mov	 AH,0
1   696	    03B6  C3				 ret	 ;в AL - код буквы, в AH - ноль
1   697	    03B7			 @@NoInput:
1   698	    03B7  33 C0				 xor	 AX,AX
1   699	    03B9  C3				 ret	 ;в AL и AH - нули
1   700	    03BA			 ENDP WaitChar
1   701
1   702
1   703					 ;*************************************
1   704					 ;* ОЧИСТКА ЭКРАНА В ТЕКСТОВОМ РЕЖИМЕ *
1   705					 ;*  (процедура	параметров не имеет)  *
1   706					 ;*************************************
1   707	    03BA			 PROC ClearScreen NEAR
1   708	    03BA  60				 pusha
1   709	    03BB  06				 push	 ES
1   710					 ; Настроить ES:DI на "текстовую" область видеопамяти
1   711	    03BC  B8 B800			 mov	 AX,0B800h
1   712	    03BF  8E C0				 mov	 ES,AX
1   713	    03C1  FC				 cld
1   714	    03C2  BF 0000			 mov	 DI,0
1   715					 ; Вывести 2000	"пустых" символов (ASCII-код 0)	с
1   716					 ; атрибутом "белый цвет, черный фон"
1   717	    03C5  B9 07D0			 mov	 CX,2000
1   718	    03C8  B8 0F00			 mov	 AX,0F00H
1   719	    03CB  F3> AB			 rep	 stosw
1   720	    03CD  07				 pop	 ES
1   721	    03CE  61				 popa
1   722	    03CF  C3				 ret
1   723	    03D0			 ENDP ClearScreen
1   724
1   725
1   726					 ;*****************************************************
1   727					 ;* ПОДАЧА ЗВУКОВОГО СИГНАЛА ЧЕРЕЗ ВСТРОЕННЫЙ ДИНАМИК *
1   728					 ;*	     (процедура	параметров не имеет)	      *
1   729					 ;*****************************************************
1   730	    03D0			 PROC Beep NEAR
1   731	    03D0  50				 push	 AX
1   732	    03D1  52				 push	 DX
1   733					 ; Послать на терминал код "звонок" (07h)
1   734	    03D2  B4 02				 mov	 AH,2
1   735	    03D4  B2 07				 mov	 DL,7
1   736	    03D6  CD 21				 int	 21h
1   737	    03D8  5A				 pop	 DX
1   738	    03D9  58				 pop	 AX
1   739	    03DA  C3				 ret
1   740	    03DB			 ENDP Beep
1   741	    03DB			 ENDS
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 14
Linmode.asm



1   742
    743
    744	    0000			 SEGMENT sseg para stack 'STACK'
    745	    0000  0400*(??)		 DB 400h DUP(?)
    746	    0400			 ENDS
    747
    748	    0005			 DATASEG
    749					 ; Текстовi повiдомлення
    750	    0005  0D 00	1C 84 A0 AC AF+	 Txt1 DB LIGHTMAGENTA,0,28,"Дамп оперативної пам'яти",0
    751		  20 AE	AF A5 E0 A0 E2+
    752		  A8 A2	AD AE F5 20 AF+
    753		  A0 AC	27 EF E2 A8 00
    754	    0021  0E 02	00 80 A4 E0 A5+	      DB YELLOW,2,0,"Адреси",0
    755		  E1 A8	00
    756	    002B  0A 02	0B		      DB LIGHTGREEN,2,11
    757	    002E  98 69	E1 AD A0 A4 E6+	      DB "Шiснадцятерiчне представлення:",0
    758		  EF E2	A5 E0 69 E7 AD+
    759		  A5 20	AF E0 A5 A4 E1+
    760		  E2 A0	A2 AB A5 AD AD+
    761		  EF 3A	00
    762	    004D  0B 02	3D 41 53 43 49+	      DB LIGHTCYAN,2,61,"ASCII-коди:",0
    763		  49 2D	AA AE A4 A8 3A+
    764		  00
    765	    005C  0C 15	00 82 A2 A5 A4+	      DB LIGHTRED,21,0,"Введiть	число "
    766		  69 E2	EC 20 E7 A8 E1+
    767		  AB AE	20
    768	    006D  A0 A1	AE 20 AD A0 E2+	      DB "або натиснiсть керуючу клавiшу:",0
    769		  A8 E1	AD 69 E1 E2 EC+
    770		  20 AA	A5 E0 E3 EE E7+
    771		  E3 20	AA AB A0 A2 69+
    772		  E8 E3	3A 00
    773	    008D  17 00	91 E2 E0 69 AB+	 Txt2 DB 23,0, "Стрiлка	вниз - наступнi	256 байт;",0
    774		  AA A0	20 A2 AD A8 A7+
    775		  20 2D	20 AD A0 E1 E2+
    776		  E3 AF	AD 69 20 32 35+
    777		  36 20	A1 A0 A9 E2 3B+
    778		  00
    779	    00B1  17 23	91 E2 E0 69 AB+	      DB 23,35,	"Стрiлка нагору	- попереднi 256	байт;",0
    780		  AA A0	20 AD A0 A3 AE+
    781		  E0 E3	20 2D 20 AF AE+
    782		  AF A5	E0 A5 A4 AD 69+
    783		  20 32	35 36 20 A1 A0+
    784		  A9 E2	3B 00
    785	    00D8  18 00	45 6E 74 65 72+	      DB 24,0, "Enter -	завершення вводу адреси;",0
    786		  20 2D	20 A7 A0 A2 A5+
    787		  E0 E8	A5 AD AD EF 20+
    788		  A2 A2	AE A4 E3 20 A0+
    789		  A4 E0	A5 E1 A8 3B 00
    790	    00FB  18 21	45 73 63 20 2D+	      DB 24,33,	"Esc - вiдмiна вводу адреси;",0
    791		  20 A2	69 A4 AC 69 AD+
    792		  A0 20	A2 A2 AE A4 E3+
    793		  20 A0	A4 E0 A5 E1 A8+
    794		  3B 00
    795	    0119  18 3C	46 31 30 20 2D+	      DB 24,60,	"F10 - вихiд",0
    796		  20 A2	A8 E5 69 A4 00
    797
    798					 ; Кiлькiсть введених символiв числа
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 15
Linmode.asm



    799	    0127  00			 CharacterCounter DB 0
    800
    801					 ; Позицiя для введенню	адреси на екранi
    802	    0128  15 2F			 OutAddress DB 21,47
    803
    804					 ; Рядок для вводу адреси
    805	    012A  09*(00)		 AddressString DB 9 DUP(0)
    806
    807					 ; Рядок промiжкiв для "затирання" числа
    808	    0133  15 2F	09*(20)	00	 SpaceString DB	21,47,9	DUP(' '),0
    809
    810					 ; Початкова адреса
    811	    013F  00000000		 StartAddress DD 0
    812
    813					 ; Код команди
    814	    0143  00			 CommandByte DB	0
    815	    0144			 ENDS
    816
    817
    818	    03DB			 CODESEG
    819					 ;******************************************************
    820					 ;*	    ВИВIД БАЙТА	НА ЕКРАН У КОДI	ASCII	       *
    821					 ;* Пiдпрограма	виводить змiст регiстра	AL у кодi      *
    822					 ;* ASCII в зазначену позицiю екрана.		       *
    823					 ;* Координати позицiї передаються через глобальнi     *
    824					 ;* змiннi ScreenString	i ScreenColumn.		       *
    825					 ;******************************************************
    826	    03DB			 PROC ShowASCIIChar near
    827	    03DB  60				 pusha
    828	    03DC  1E				 push	 DS
    829	    03DD  06				 push	 ES
    830	    03DE  BF 0000s			 mov	 DI,DGROUP
    831	    03E1  8E DF				 mov	 DS,DI
    832	    03E3  FC				 cld
    833
    834					 ; Настроїти пари ES:DI	для прямого виводу у вiдеопам'ять
    835	    03E4  50				 push	 AX
    836
    837					 ; Завантажити адресу сегмента вiдеоданих у ES
    838	    03E5  B8 B800			 mov	 AX,0B800h
    839	    03E8  8E C0				 mov	 ES,AX
    840
    841					 ; Помножити номер рядка на довжину рядка в байтах
    842	    03EA  A1 0001r			 mov	 AX,[ScreenString]
    843	    03ED  BA 00A0			 mov	 DX,160
    844	    03F0  F7 E2				 mul	 DX
    845
    846	    03F2  03 06	0003r			 add	 AX,[ScreenColumn]
    847	    03F6  03 06	0003r			 add	 AX,[ScreenColumn]
    848	    03FA  8B F8				 mov	 DI,AX
    849	    03FC  58				 pop	 AX
    850	    03FD  8A 26	0000r			 mov	 AH,[TextColorAndBackground]
    851	    0401  AB				 stosw
    852
    853					 ; Пiдготовка для виводу наступних байтiв
    854						 ; Перевести поточну позицiю на	2 символи влiво
    855	    0402  FF 06	0003r			 inc	 [ScreenColumn]
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 16
Linmode.asm



    856
    857					 ; Перевiрити перетинання правої границi екрана
    858	    0406  83 3E	0003r 50		 cmp	 [ScreenColumn],80
    859	    040B  72 09				 jb	 @@End
    860
    861						 ; Якщо	досягнута права	границя	екрана -
    862						 ; перейти на наступний	рядок
    863	    040D  83 2E	0003r 50		 sub	 [ScreenColumn],80
    864	    0412  FF 06	0001r			 inc	 [ScreenString]
    865	    0416  07			 @@End:	 pop	 ES
    866	    0417  1F				 pop	 DS
    867	    0418  61				 popa
    868	    0419  C3				 ret
    869	    041A			 ENDP ShowASCIIChar
    870
    871
    872					 ;*********************************************************
    873					 ;* ПЕРЕКЛАД ЧИСЛА IЗ ШЕСТНАДЦАТЕРИЧНОГО КОДУ В	ДВIЙКОВИЙ *
    874					 ;* DS:SI - число в кодi ASCII.				  *
    875					 ;* Результат повертається в EAX.			  *
    876					 ;*********************************************************
    877	    041A			 PROC HexToBin32 near
    878	    041A  66| 53			 push	 EBX
    879	    041C  51				 push	 CX
    880	    041D  56				 push	 SI
    881	    041E  FC				 cld
    882	    041F  66| 33 DB			 xor	 EBX,EBX ;обнулюємо накопичувач
    883	    0422  33 C9				 xor	 CX,CX	 ;обнулюємо лiчильник цифр
    884	    0424  AC			 @@h0:	 lodsb
    885
    886					 ; Перевiрка на	нуль (ознака кiнця рядка)
    887	    0425  22 C0				 and	 AL,AL
    888	    0427  74 30				 jz	 @@h4
    889
    890					 ; Перевiрка на	дiапазон '0'-'9'
    891	    0429  3C 30				 cmp	 AL,'0'
    892	    042B  72 31				 jb	 @@Error
    893	    042D  3C 39				 cmp	 AL,'9'
    894	    042F  77 04				 ja	 @@h1
    895	    0431  2C 30				 sub	 AL,'0'
    896	    0433  EB 16				 jmp short @@h3
    897	    0435			 @@h1:	 ; Перевiрка на	дiапазон 'A'-''
    898	    0435  3C 41				 cmp	 AL,'A'
    899	    0437  72 25				 jb	 @@Error
    900	    0439  3C 46				 cmp	 AL,'F'
    901	    043B  77 04				 ja	 @@h2
    902	    043D  2C 37				 sub	 AL,'A'-10
    903	    043F  EB 0A				 jmp short @@h3
    904	    0441			 @@h2:	 ; Перевiрка на	дiапазон 'a'-'f'
    905	    0441  3C 61				 cmp	 AL,'a'
    906	    0443  72 19				 jb	 @@Error
    907	    0445  3C 66				 cmp	 AL,'f'
    908	    0447  77 15				 ja	 @@Error
    909	    0449  2C 57				 sub	 AL,'a'-10
    910	    044B			 @@h3:	 ; Дописати до результату
    911						 ; черговi 4 розряди праворуч
    912	    044B  66| C1 E3 04			 shl	 EBX,4
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 17
Linmode.asm



    913	    044F  0A D8				 or	 BL,AL
    914	    0451  41				 inc	 CX
    915	    0452  83 F9	08			 cmp	 CX,8
    916	    0455  76 CD				 jbe	 @@h0
    917						 ; Якщо	в числi	бiльше 8 цифр -	помилка
    918	    0457  EB 05				 jmp short @@Error
    919	    0459			 @@h4:	 ; Успiшне завершення -	результат у EAX
    920	    0459  66| 8B C3			 mov	 EAX,EBX
    921	    045C  EB 03				 jmp short @@End
    922	    045E			 @@Error:; Помилка - обнулити результат
    923	    045E  66| 33 C0			 xor	 EAX,EAX
    924	    0461  5E			 @@End:	 pop	 SI
    925	    0462  59				 pop	 CX
    926	    0463  66| 5B			 pop	 EBX
    927	    0465  C3				 ret
    928	    0466			 ENDP HexToBin32
    929
    930
    931					 ;************************************************
    932					 ;* ПРИЙНЯТИ З КЛАВIАТУРИ НОВУ АДРЕСУ ЧИ КОМАНДУ *
    933					 ;************************************************
    934	    0466			 PROC GetAddressOrCommand near
    935	    0466  66| 60			 pushad
    936	    0468  C6 06	0000r 0F		 mov	 [TextColorAndBackground],WHITE
    937	    046D  C7 06	0001r 0015		 mov	 [ScreenString],21
    938	    0473			 @@GetAddressOrCommand:
    939					 ; Iнiцiалiзувати змiннi
    940						 ; Обнулити лiчильник цифр
    941	    0473  C6 06	0127r 00		 mov	 [CharacterCounter],0
    942						 ; Очистити рядок
    943	    0478  BF 012Ar			 mov	 DI,offset AddressString
    944	    047B  C6 05	00			 mov	 [byte ptr DS:DI],0
    945						 ; Очистити позицiю введення (забити промiжками)
    946	    047E  BE 0133r			 mov	 SI,offset SpaceString
    947	    0481  E8 FE8C			 call	 ShowString
    948						 ; Установити курсор у позицiю введення
    949	    0484  C7 06	0003r 002F		 mov	 [ScreenColumn],47
    950	    048A  A0 0127r			 mov	 AL,[CharacterCounter]
    951	    048D  00 06	0003r			 add	 [byte ptr ScreenColumn],AL
    952	    0491  E8 FED5			 call	 SetCursorPosition
    953						 ; Увести цифру	чи команду
    954	    0494  E8 FEEE			 call	 GetChar
    955	    0497  3C 00				 cmp	 AL,0
    956	    0499  0F 84	00A5			 jz	 @@Command
    957
    958					 ; ВВЕДЕННЯ АДРЕСИ В ШЕСТНАДЦАТЕРИЧНОМУ	КОДI
    959	    049D			 @@Address:
    960						 ; Перевiрка на	дiапазон '0'-'9'
    961	    049D  3C 30				 cmp	 AL,'0'
    962	    049F  0F 82	009A			 jb	 @@AddressError
    963	    04A3  3C 39				 cmp	 AL,'9'
    964	    04A5  76 16				 jbe	 @@WriteChar
    965						 ; Перевiрка на	дiапазон 'A'-''
    966	    04A7  3C 41				 cmp	 AL,'A'
    967	    04A9  0F 82	0090			 jb	 @@AddressError
    968	    04AD  3C 46				 cmp	 AL,'F'
    969	    04AF  76 0C				 jbe	 @@WriteChar
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 18
Linmode.asm



    970						 ; Перевiрка на	дiапазон 'a'-'f'
    971	    04B1  3C 61				 cmp	 AL,'a'
    972	    04B3  0F 82	0086			 jb	 @@AddressError
    973	    04B7  3C 66				 cmp	 AL,'f'
    974	    04B9  0F 87	0080			 ja	 @@AddressError
    975	    04BD			 @@WriteChar:
    976						 ; Перевiряємо кiлькiсть цифр
    977	    04BD  80 3E	0127r 08		 cmp	 [CharacterCounter],8
    978	    04C2  73 79	90 90			 jae	 @@AddressError
    979	    04C6  FE 06	0127r			 inc	 [CharacterCounter]
    980						 ; Записуємо цифру в число
    981	    04CA  88 05				 mov	 [DS:DI],AL
    982	    04CC  47				 inc	 DI
    983						 ; Пересунути ознака кiнця рядка
    984						 ; у наступний розряд
    985	    04CD  C6 05	00			 mov	 [byte ptr DS:DI],0
    986						 ; Вiдобразити число на	екранi
    987	    04D0  BE 0133r			 mov	 SI,offset SpaceString
    988	    04D3  E8 FE3A			 call	 ShowString
    989	    04D6  BE 0128r			 mov	 SI,offset OutAddress
    990	    04D9  E8 FE34			 call	 ShowString
    991	    04DC			 @@GetNextChar:
    992						 ; Вiдобразити курсор у	новiй позицiї введення
    993	    04DC  C7 06	0003r 002F		 mov	 [ScreenColumn],47
    994	    04E2  A0 0127r			 mov	 AL,[CharacterCounter]
    995	    04E5  00 06	0003r			 add	 [byte ptr ScreenColumn],AL
    996	    04E9  E8 FE7D			 call	 SetCursorPosition
    997						 ; Очiкувати введення наступного символу
    998	    04EC  E8 FE96			 call	 GetChar
    999	    04EF  3C 00				 cmp	 AL,0
   1000	    04F1  75 AA				 jne	 @@Address
   1001
   1002					 ; Проаналiзувати код натиснутої клавiшi
   1003	    04F3  80 FC	1B			 cmp	 AH,B_Esc	;скасування введення адреси
   1004	    04F6  0F 84	FF79			 je	 @@GetAddressOrCommand
   1005
   1006	    04FA			 @@TestF10:
   1007	    04FA  80 FC	44			 cmp	 AH,F10		;"Вихiд"
   1008	    04FD  75 07				 jne	 @@TestRubout
   1009	    04FF  88 26	0143r			 mov	 [CommandByte],AH
   1010	    0503  EB 76	90			 jmp	 @@End
   1011
   1012	    0506			 @@TestRubout:
   1013	    0506  80 FC	08			 cmp	 AH,B_RUBOUT	;"Вибiй"
   1014	    0509  75 1D				 jne	 @@TestEnter
   1015	    050B  80 3E	0127r 00		 cmp	 [CharacterCounter],0
   1016	    0510  74 2B				 je	 @@AddressError
   1017						 ; Пересунути ознака кiнця рядка
   1018						 ; на розряд улiво
   1019	    0512  4F				 dec	 DI
   1020	    0513  FE 0E	0127r			 dec	 [CharacterCounter]
   1021	    0517  C6 05	00			 mov	 [byte ptr DS:DI],0
   1022						 ; Вiдобразити число на	екранi
   1023	    051A  BE 0133r			 mov	 SI,offset SpaceString
   1024	    051D  E8 FDF0			 call	 ShowString
   1025	    0520  BE 0128r			 mov	 SI,offset OutAddress
   1026	    0523  E8 FDEA			 call	 ShowString
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 19
Linmode.asm



   1027	    0526  EB B4				 jmp	 @@GetNextChar
   1028
   1029	    0528			 @@TestEnter:
   1030	    0528  80 FC	0D			 cmp	 AH,B_Enter	;завершення введення числа
   1031	    052B  75 10				 jne	 @@AddressError
   1032	    052D  88 26	0143r			 mov	 [CommandByte],AH
   1033	    0531  BE 012Ar			 mov	 SI,offset AddressString
   1034	    0534  E8 FEE3			 call	 HexToBin32
   1035	    0537  66| A3 013Fr			 mov	 [StartAddress],EAX
   1036	    053B  EB 3E				 jmp short @@End
   1037
   1038	    053D			 @@AddressError:
   1039	    053D  E8 FE90			 call	 Beep
   1040	    0540  EB 9A				 jmp	 @@GetNextChar
   1041
   1042					 ; ОБРОБКА "КОМАНД"
   1043	    0542			 @@Command:
   1044	    0542  80 FC	44			 cmp	 AH,F10		;"Вихiд"
   1045	    0545  75 06				 jne	 @@TestDn
   1046	    0547  88 26	0143r			 mov	 [CommandByte],AH
   1047	    054B  EB 2E				 jmp short @@End
   1048
   1049	    054D			 @@TestDn:
   1050	    054D  80 FC	50			 cmp	 AH,B_DN	;"Стрiлка вниз"
   1051	    0550  75 0F				 jne	 @@TestUp
   1052	    0552  88 26	0143r			 mov	 [CommandByte],AH
   1053	    0556  66| 81 06 013Fr     +		 add	 [StartAddress],256
   1054		  00000100
   1055	    055F  EB 1A				 jmp short @@End
   1056
   1057	    0561			 @@TestUp:
   1058	    0561  80 FC	48			 cmp	 AH,B_UP	;"Стрiлка нагору"
   1059	    0564  75 0F				 jne	 @@CommandError
   1060	    0566  88 26	0143r			 mov	 [CommandByte],AH
   1061	    056A  66| 81 2E 013Fr     +		 sub	 [StartAddress],256
   1062		  00000100
   1063	    0573  EB 06				 jmp short @@End
   1064
   1065	    0575			 @@CommandError:
   1066	    0575  E8 FE58			 call	 Beep
   1067	    0578  E9 FEF8			 jmp	 @@GetAddressOrCommand
   1068	    057B  66| 61		 @@End:	 popad
   1069	    057D  C3				 ret
   1070	    057E			 ENDP	 GetAddressOrCommand
   1071
   1072					 ;*******************************
   1073					 ;* Стартова процедура програми	*
   1074					 ;*******************************
   1075	    057E			 PROC MemoryDump
   1076	    057E  B8 0000s			 mov	 AX,DGROUP
   1077	    0581  8E D8				 mov	 DS,AX
   1078
   1079					 ; Установлюємо	режим прямої адресацiї памятi
   1080	    0583  E8 FA7A			 call	 Initialization
   1081
   1082					 ; Текстовий режим
   1083	    0586  B8 0003			 mov	 AX,3
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 20
Linmode.asm



   1084	    0589  CD 10				 int	 10h
   1085
   1086					 ; Сховати курсор
   1087	    058B  C7 06	0001r 0019		 mov	 [ScreenString],25
   1088	    0591  C7 06	0003r 0000		 mov	 [ScreenColumn],0
   1089	    0597  E8 FDCF			 call	 SetCursorPosition
   1090
   1091	    059A  B9 0005			 mov	 CX,5
   1092	    059D  BE 0005r			 mov	 SI,offset Txt1
   1093
   1094	    05A0			 @@NextString1:
   1095	    05A0  E8 FDB3			 call	 ShowColorString
   1096	    05A3  E2 FB				 loop	 @@NextString1
   1097	    05A5  C6 06	0000r 0F		 mov	 [TextColorAndBackground],WHITE
   1098	    05AA  B9 0005			 mov	 CX,5
   1099	    05AD  BE 008Dr			 mov	 SI,offset Txt2
   1100
   1101	    05B0			 @@NextString2:
   1102	    05B0  E8 FD5D			 call	 ShowString
   1103	    05B3  E2 FB				 loop	 @@NextString2
   1104
   1105	    05B5  C6 06	0000r 0F		 mov	 [TextColorAndBackground],WHITE
   1106
   1107					 ; Вiдобразити символи-дiльники	колонок
   1108	    05BA  B0 B3				 mov	 AL,0B3h
   1109	    05BC  C7 06	0001r 0002		 mov	 [ScreenString],2
   1110	    05C2  C7 06	0003r 0009		 mov	 [ScreenColumn],9
   1111	    05C8  E8 FE10			 call	 ShowASCIIChar
   1112	    05CB  C7 06	0003r 003B		 mov	 [ScreenColumn],59
   1113	    05D1  E8 FE07			 call	 ShowASCIIChar
   1114	    05D4  C7 06	0001r 0003		 mov	 [ScreenString],3
   1115	    05DA  C7 06	0003r 0009		 mov	 [ScreenColumn],9
   1116	    05E0  E8 FDF8			 call	 ShowASCIIChar
   1117	    05E3  C7 06	0003r 003B		 mov	 [ScreenColumn],59
   1118	    05E9  E8 FDEF			 call	 ShowASCIIChar
   1119
   1120					 ; Iнiцiалiзуємо змiннi
   1121	    05EC  66| C7 06 013Fr     +		 mov	 [StartAddress],0
   1122		  00000000
   1123	    05F5  C6 06	0143r 00		 mov	 [CommandByte],0
   1124
   1125					 ; ЗОВНIШНIЙ ЦИКЛ
   1126	    05FA  66| 8B 1E 013Fr	 @@q0:	 mov	 EBX,[StartAddress]
   1127	    05FF  C7 06	0001r 0004		 mov	 [ScreenString],4
   1128	    0605  BA 0010			 mov	 DX,16
   1129	    0608  C7 06	0003r 0000	 @@q1:	 mov	 [ScreenColumn],0
   1130
   1131					 ; Вiдобразити лiнiйну адресу першого байта в групi
   1132	    060E  C6 06	0000r 0E		 mov	 [TextColorAndBackground],YELLOW
   1133	    0613  66| 8B C3			 mov	 EAX,EBX
   1134	    0616  E8 FC5B			 call	 ShowHexDWord
   1135
   1136					 ; Вiдобразити символ-роздiльник стовпчикiв
   1137	    0619  C6 06	0000r 0F		 mov	 [TextColorAndBackground],WHITE
   1138	    061E  FF 06	0003r			 inc	 [ScreenColumn]
   1139	    0622  B0 B3				 mov	 AL,0B3h
   1140	    0624  E8 FDB4			 call	 ShowASCIIChar
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 21
Linmode.asm



   1141	    0627  FF 06	0003r			 inc	 [ScreenColumn]
   1142
   1143					 ; Вiдобразити чергову групу байт
   1144					 ; у шестнадцатеричном кодi
   1145	    062B  B9 0010			 mov	 CX,16
   1146	    062E  C6 06	0000r 0A		 mov	 [TextColorAndBackground],LIGHTGREEN
   1147	    0633  65: 67| 8A 03		 @@q2:	 mov	 AL,[GS:EBX]
   1148	    0637  E8 FBD7			 call	 ShowByteHexCode
   1149	    063A  FF 06	0003r			 inc	 [ScreenColumn]
   1150	    063E  66| 43			 inc	 EBX
   1151	    0640  E2 F1				 loop	 @@q2
   1152
   1153					 ; Вiдобразити символ-роздiльник стовпчикiв
   1154	    0642  C6 06	0000r 0F		 mov	 [TextColorAndBackground],WHITE
   1155	    0647  B0 B3				 mov	 AL,0B3h
   1156	    0649  E8 FD8F			 call	 ShowASCIIChar
   1157	    064C  FF 06	0003r			 inc	 [ScreenColumn]
   1158
   1159						 ; Повернутися назад на	16 символiв
   1160	    0650  66| 83 EB 10			 sub	 EBX,16
   1161
   1162					 ; Вiдобразити чергову групу байт у кодах ASCII
   1163	    0654  B9 0010			 mov	 CX,16
   1164	    0657  C6 06	0000r 0B		 mov	 [TextColorAndBackground],LIGHTCYAN
   1165	    065C  65: 67| 8A 03		 @@q3:	 mov	 AL,[GS:EBX]
   1166	    0660  E8 FD78			 call	 ShowASCIIChar
   1167	    0663  66| 43			 inc	 EBX
   1168	    0665  E2 F5				 loop	 @@q3
   1169	    0667  FF 06	0001r			 inc	 [ScreenString]
   1170	    066B  4A				 dec	 DX
   1171	    066C  75 9A				 jnz	 @@q1
   1172
   1173						 ; Очiкувати натискання	будь-якої клавiшi
   1174	    066E  E8 FDF5			 call	 GetAddressOrCommand
   1175	    0671  80 3E	0143r 44		 cmp	 [CommandByte],F10
   1176	    0676  75 82				 jne	 @@q0
   1177
   1178	    0678			 @@End:	 ; Установити текстовий	режим
   1179	    0678  B8 0003			 mov	 ax,3
   1180	    067B  CD 10				 int	 10h
   1181					 ; Вихiд у DOS
   1182	    067D  B4 4C				 mov	 AH,4Ch
   1183	    067F  CD 21				 int	 21h
   1184	    0681			 ENDP	 MemoryDump
   1185					 END	 MemoryDump
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 22
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "01/30/07"
??FILENAME		Text   "Linmode	"
??TIME			Text   "11:40:01"
??VERSION		Number 0314
@32BIT			Text   0			   #9
@@ADDRESS		Near   LINMODE_TEXT:049D	   #959	 1000
@@ADDRESSERROR		Near   LINMODE_TEXT:053D	   962	967  972  974  978  1016  1031	#1038
@@COMMAND		Near   LINMODE_TEXT:0542	   956	#1043
@@COMMANDERROR		Near   LINMODE_TEXT:0575	   1059	 #1065
@@END			Near   LINMODE_TEXT:0265	   378	#383
@@END			Near   LINMODE_TEXT:02DA	   480	#486
@@END			Near   LINMODE_TEXT:0416	   859	#865
@@END			Near   LINMODE_TEXT:0461	   921	#924
@@END			Near   LINMODE_TEXT:057B	   1010	 1036  1047  1055  1063	 #1068
@@END			Near   LINMODE_TEXT:0678	   #1178
@@ERROR			Near   LINMODE_TEXT:0352	   544	553  567  #577
@@ERROR			Near   LINMODE_TEXT:045E	   892	899  906  908  918  #922
@@GET1			Near   LINMODE_TEXT:038F	   655	#657
@@GET1			Near   LINMODE_TEXT:03AB	   688	#690
@@GET2			Near   LINMODE_TEXT:0398	   658	#663
@@GET2			Near   LINMODE_TEXT:03B4	   691	#695
@@GETADDRESSORCOMMAND	Near   LINMODE_TEXT:0473	   #938	 1004  1067
@@GETNEXTCHAR		Near   LINMODE_TEXT:04DC	   #991	 1027  1040
@@H0			Near   LINMODE_TEXT:0424	   #884	 916
@@H1			Near   LINMODE_TEXT:0435	   894	#897
@@H2			Near   LINMODE_TEXT:0441	   901	#904
@@H3			Near   LINMODE_TEXT:044B	   896	903  #910
@@H4			Near   LINMODE_TEXT:0459	   888	#919
@@KB			Near   LINMODE_TEXT:0209	   #284	 286
@@L0			Near   LINMODE_TEXT:02BA	   #466	 473
@@L1			Near   LINMODE_TEXT:02C2	   469	#472
@@L1			Near   LINMODE_TEXT:033E	   #560	 571
@@L2			Near   LINMODE_TEXT:034D	   564	#572
@@M0			Near   LINMODE_TEXT:0243	   357	#360
@@M1			Near   LINMODE_TEXT:024F	   368	#371
@@NEXTSTRING1		Near   LINMODE_TEXT:05A0	   #1094  1096
@@NEXTSTRING2		Near   LINMODE_TEXT:05B0	   #1101  1103
@@NOINPUT		Near   LINMODE_TEXT:03B7	   683	#697
@@Q0			Near   LINMODE_TEXT:05FA	   #1126  1176
@@Q1			Near   LINMODE_TEXT:0608	   #1129  1171
@@Q2			Near   LINMODE_TEXT:0633	   #1147  1151
@@Q3			Near   LINMODE_TEXT:065C	   #1165  1168
@@TESTDN		Near   LINMODE_TEXT:054D	   1045	 #1049
@@TESTENTER		Near   LINMODE_TEXT:0528	   1014	 #1029
@@TESTF10		Near   LINMODE_TEXT:04FA	   #1006
@@TESTRUBOUT		Near   LINMODE_TEXT:0506	   1008	 #1012
@@TESTUP		Near   LINMODE_TEXT:0561	   1051	 #1057
@@WRITECHAR		Near   LINMODE_TEXT:04BD	   964	969  #975
@CODE			Text   LINMODE_TEXT		   #9  #9  #107	 #310  #818
@CODESIZE		Text   1			   #9
@CPU			Text   0F8FH			   #7
@CURSEG			Text   LINMODE_TEXT		   #107	 #301  #310  #744  #748	 #818
@DATA			Text   DGROUP			   #9
@DATASIZE		Text   0			   #9
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 23
Symbol Table



@FILENAME		Text   LINMODE
@INTERFACE		Text   00H			   #9
@MODEL			Text   4			   #9
@STACK			Text   DGROUP			   #9
@WORDSIZE		Text   2			   #7  #107  #301  #310	 #744  #748  #818
ADDRESSSTRING		Byte   DGROUP:012A		   #805	 943  1033
ALT_F1			Text   104			   #54
ALT_F2			Text   105			   #55
BEEP			Near   LINMODE_TEXT:03D0	   #730	 1039  1066
BLACK			Text   0			   #73
BLUE			Text   1			   #74
BROWN			Text   6			   #79
B_BS			Text   75			   #45
B_DEL			Text   83			   #51
B_DN			Text   80			   #48	1050
B_END			Text   79			   #47
B_ENTER			Text   13			   #26	1030
B_ESC			Text   27			   #27	1003
B_FWD			Text   77			   #46
B_HOME			Text   71			   #42
B_INS			Text   82			   #50
B_LF			Text   10			   #25
B_PGDN			Text   81			   #49
B_PGUP			Text   73			   #44
B_RUBOUT		Text   8			   #23	1013
B_TAB			Text   9			   #24
B_UP			Text   72			   #43	1058
CHARACTERCOUNTER	Byte   DGROUP:0127		   #799	 941  950  977	979  994  1015	1020
CLEARSCREEN		Near   LINMODE_TEXT:03BA	   #707
CMOS_ADDR		Text   0070h			   #100	 200  203  251	254
CMOS_DATA		Text   0071h			   #101
COMMANDBYTE		Byte   DGROUP:0143		   #814	 1009  1032  1046  1052	 1060  1123  1175
CTRL_BS			Text   115			   #57
CTRL_C			Text   3			   #56
CTRL_END		Text   117			   #59
CTRL_FWD		Text   116			   #58
CTRL_HOME		Text   119			   #61
CTRL_PGDN		Text   118			   #60
CTRL_PGUP		Text   122			   #62
CYAN			Text   3			   #76
DARKGREY		Text   8			   #82
ENABLE_A20		Near   LINMODE_TEXT:01F3	   142	#263
F1			Text   59			   #30
F10			Text   68			   #39	1007  1044  1175
F2			Text   60			   #31
F3			Text   61			   #32
F4			Text   62			   #33
F5			Text   63			   #34
F6			Text   64			   #35
F7			Text   65			   #36
F8			Text   66			   #37
F9			Text   67			   #38
GDT			Word   LINMODE_TEXT:004C	   #156	 182  183  188	189  191  192
GDTEND			Word   LINMODE_TEXT:006C	   #162	 192
GDTPTR			Qword  LINMODE_TEXT:0044	   #153	 192  193  208
GETADDRESSORCOMMAND	Near   LINMODE_TEXT:0466	   #934	 1174
GETCHAR			Near   LINMODE_TEXT:0385	   #651	 954  998
Turbo Assembler	 Version 3.2	    01/30/07 11:40:01	    Page 24
Symbol Table



GREEN			Text   2			   #75
HEXTOBIN32		Near   LINMODE_TEXT:041A	   #877	 1034
INITIALIZATION		Near   LINMODE_TEXT:0000	   #112	 1080
LIGHTBLUE		Text   9			   #83
LIGHTCYAN		Text   11			   #85	762  1164
LIGHTGREEN		Text   10			   #84	756  1146
LIGHTGREY		Text   7			   #80
LIGHTMAGENTA		Text   13			   #87	750
LIGHTRED		Text   12			   #86	765
LOCAL_STK_TOP		Byte   LINMODE_TEXT:016B	   127	#164
MAGENTA			Text   5			   #78
MEMORYDUMP		Far    LINMODE_TEXT:057E	   #1075  1185
OUTADDRESS		Byte   DGROUP:0128		   #802	 989  1025
RED			Text   4			   #77
SAVE_DS			Word   LINMODE_TEXT:0042	   120	138  #151
SAVE_SP			Word   LINMODE_TEXT:003E	   116	135  #149
SAVE_SS			Word   LINMODE_TEXT:0040	   118	136  #150
SCREENCOLUMN		Word   DGROUP:0003		   #307	 342  343  375	377  381  458  459  477	 479  483  505	514  517  +
							   520	623  846  847  855  858	 863  949  951	993  995  1088	1110  1112+
							   1115	 1117  1129  1138  1141	 1149  1157
SCREENSTRING		Word   DGROUP:0001		   #306	 337  382  454	484  620  842  864  937	 1087  1109  1114  1127	  +
							   1169
SELF_MOD_CS		Word   LINMODE_TEXT:01DD	   123	#237
SETCURSORPOSITION	Near   LINMODE_TEXT:0369	   #617	 952  996  1089
SETLADDRMODEFORGS	Near   LINMODE_TEXT:016C	   131	#174
SETPMODE		Near   LINMODE_TEXT:01C2	   216	#218
SETRMODE		Near   LINMODE_TEXT:01DF	   236	#239
SHOWASCIICHAR		Near   LINMODE_TEXT:03DB	   #826	 1111  1113  1116  1118	 1140  1156  1166
SHOWBINDWORD		Near   LINMODE_TEXT:02EF	   #511
SHOWBINWORD		Near   LINMODE_TEXT:02DE	   #502
SHOWBYTEBINCODE		Near   LINMODE_TEXT:0291	   #441	 504  507  513	516  519
SHOWBYTEHEXCODE		Near   LINMODE_TEXT:0211	   #320	 402  404  421	423  425  427  1148
SHOWCOLORSTRING		Near   LINMODE_TEXT:0356	   #592	 1095
SHOWHEXDWORD		Near   LINMODE_TEXT:0274	   #419	 1134
SHOWHEXWORD		Near   LINMODE_TEXT:0269	   #400
SHOWSTRING		Near   LINMODE_TEXT:0310	   #523	 602  947  988	990  1024  1026	 1102
SPACESTRING		Byte   DGROUP:0133		   #808	 946  987  1023
STARTADDRESS		Dword  DGROUP:013F		   #811	 1035  1053  1061  1121	 1126
SYS_MONDO_SEG		Text   0018h			   #105	 226
SYS_PROT_CS		Text   0008h			   #103	 217
SYS_REAL_SEG		Text   0010h			   #104	 220
TEXTCOLORANDBACKGROUND	Byte   DGROUP:0000		   #304	 349  464  532	595  600  605  850  936	 1097  1105  1132  1137	  +
							   1146	 1154  1164
TXT1			Byte   DGROUP:0005		   #750	 1092
TXT2			Byte   DGROUP:008D		   #773	 1099
WAIT8042BUFFEREMPTY	Near   LINMODE_TEXT:0205	   264	267  270  #281
WAITCHAR		Near   LINMODE_TEXT:039B	   #679
WHITE			Text   15			   #89	936  1097  1105	 1137  1154
YELLOW			Text   14			   #88	754  1132

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #9  9  325  447  529	 830  1076
  _DATA			16  0144 Word	Public	DATA	   #9  #301  #748
LINMODE_TEXT		16  0681 Word	Public	CODE	   #9  9  #107	107  #310  310	#818  818
SSEG			16  0400 Para	Stack	STACK	   #744
